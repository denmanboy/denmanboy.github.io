<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>denman&#39;s blog</title>
  <subtitle>the talk is cheap show me code</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.denman.me/"/>
  <updated>2016-06-19T15:21:24.000Z</updated>
  <id>http://www.denman.me/</id>
  
  <author>
    <name>denman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>delegate和block使用的场景</title>
    <link href="http://www.denman.me/2016/06/19/delegate%E5%92%8Cblock%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9C%BA%E6%99%AF/"/>
    <id>http://www.denman.me/2016/06/19/delegate和block使用的场景/</id>
    <published>2016-06-19T11:24:51.000Z</published>
    <updated>2016-06-19T15:21:24.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://www.denman.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>tableView优化的那些事</title>
    <link href="http://www.denman.me/2016/06/19/tableView%E4%BC%98%E5%8C%96%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://www.denman.me/2016/06/19/tableView优化的那些事/</id>
    <published>2016-06-19T10:33:08.000Z</published>
    <updated>2016-06-19T15:17:36.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="tableView" scheme="http://www.denman.me/tags/tableView/"/>
    
      <category term="优化" scheme="http://www.denman.me/tags/%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>利用runtime容错</title>
    <link href="http://www.denman.me/2016/06/19/%E5%88%A9%E7%94%A8runtime%E5%AE%B9%E9%94%99/"/>
    <id>http://www.denman.me/2016/06/19/利用runtime容错/</id>
    <published>2016-06-19T10:32:41.000Z</published>
    <updated>2016-06-19T15:21:58.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="runtime" scheme="http://www.denman.me/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>为什么说Object-c是一门动态语言</title>
    <link href="http://www.denman.me/2016/06/19/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4Object-c%E6%98%AF%E4%B8%80%E9%97%A8%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80/"/>
    <id>http://www.denman.me/2016/06/19/为什么说Object-c是一门动态语言/</id>
    <published>2016-06-19T09:42:41.000Z</published>
    <updated>2016-06-19T15:17:02.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="Object-c" scheme="http://www.denman.me/tags/Object-c/"/>
    
      <category term="动态语言" scheme="http://www.denman.me/tags/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>iOS获取缓存文件的大小，实现缓的清理功能</title>
    <link href="http://www.denman.me/2016/06/18/iOS%E8%8E%B7%E5%8F%96%E7%BC%93%E5%AD%98%E6%96%87%E4%BB%B6%E7%9A%84%E5%A4%A7%E5%B0%8F%EF%BC%8C%E5%AE%9E%E7%8E%B0%E7%BC%93%E7%9A%84%E6%B8%85%E7%90%86%E5%8A%9F%E8%83%BD/"/>
    <id>http://www.denman.me/2016/06/18/iOS获取缓存文件的大小，实现缓的清理功能/</id>
    <published>2016-06-18T10:54:21.000Z</published>
    <updated>2016-06-18T11:11:23.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
      移动应用在处理网络资源时，一般都会做离线缓存处理，其中以图片缓存最为典型，其中很流行的离线缓存框架为SDWebImage。
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://www.denman.me/tags/iOS/"/>
    
      <category term="缓存" scheme="http://www.denman.me/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>Masonry框架分析-链式编程思想</title>
    <link href="http://www.denman.me/2016/06/18/Masonry%E6%A1%86%E6%9E%B6%E5%88%86%E6%9E%90-%E9%93%BE%E5%BC%8F%E7%BC%96%E7%A8%8B%E6%80%9D%E6%83%B3/"/>
    <id>http://www.denman.me/2016/06/18/Masonry框架分析-链式编程思想/</id>
    <published>2016-06-18T10:47:07.000Z</published>
    <updated>2016-06-18T10:47:07.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>KVC中对对象的属性赋值的顺序</title>
    <link href="http://www.denman.me/2016/06/18/KVC%E4%B8%AD%E5%AF%B9%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%B1%9E%E6%80%A7%E8%B5%8B%E5%80%BC%E7%9A%84%E9%A1%BA%E5%BA%8F/"/>
    <id>http://www.denman.me/2016/06/18/KVC中对对象的属性赋值的顺序/</id>
    <published>2016-06-18T10:41:31.000Z</published>
    <updated>2016-06-18T10:49:54.000Z</updated>
    
    <content type="html">&lt;p&gt;在KVC编程当中找对象的属性的顺序如下&lt;br&gt;例如 [object    setValue:@”邓小平” forKey:@”name” ];&lt;br&gt;那么KVC找属性的顺序如何呢&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.找_name的成员变量
2.找叫name的属性
3.找叫name的成员变量
4.调用setValue:&amp;lt;#(id)#&amp;gt; forUndefinedKey:&amp;lt;#(NSString *)#&amp;gt;];//要重写
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;所以一个对象用到KVC对属相赋值的时候 一定要实现&lt;br&gt; setValue:&amp;lt;#(id)#&amp;gt; forUndefinedKey:&amp;lt;#(NSString *)#&amp;gt;];方法&lt;br&gt;不然当 &lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.找_name的成员变量
2.找叫name的属性
3.找叫name的成员变量
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;都找不到的时候 会报错！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在KVC编程当中找对象的属性的顺序如下&lt;br&gt;例如 [object    setValue:@”邓小平” forKey:@”name” ];&lt;br&gt;那么KVC找属性的顺序如何呢&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1.找_name的成员变量
2.找叫name的属性
3.找叫nam
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://www.denman.me/tags/iOS/"/>
    
      <category term="KVC" scheme="http://www.denman.me/tags/KVC/"/>
    
  </entry>
  
  <entry>
    <title>Xcode常用的插件</title>
    <link href="http://www.denman.me/2016/06/18/Xcode%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8F%92%E4%BB%B6/"/>
    <id>http://www.denman.me/2016/06/18/Xcode常用的插件/</id>
    <published>2016-06-17T16:28:18.000Z</published>
    <updated>2016-06-17T16:28:18.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>关于block的那些事</title>
    <link href="http://www.denman.me/2016/06/18/%E5%85%B3%E4%BA%8Eblock%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://www.denman.me/2016/06/18/关于block的那些事/</id>
    <published>2016-06-17T16:26:47.000Z</published>
    <updated>2016-06-19T09:35:10.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="block" scheme="http://www.denman.me/tags/block/"/>
    
  </entry>
  
  <entry>
    <title>关于category不能添加实例变量</title>
    <link href="http://www.denman.me/2016/06/18/%E5%85%B3%E4%BA%8Ecategory%E4%B8%8D%E8%83%BD%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F/"/>
    <id>http://www.denman.me/2016/06/18/关于category不能添加实例变量/</id>
    <published>2016-06-17T16:25:04.000Z</published>
    <updated>2016-06-19T15:17:54.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="category" scheme="http://www.denman.me/tags/category/"/>
    
  </entry>
  
  <entry>
    <title>OC中方法和函数的区别</title>
    <link href="http://www.denman.me/2016/06/18/%E6%96%B9%E6%B3%95%E5%92%8C%E5%87%BD%E6%95%B0%E7%9A%84%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.denman.me/2016/06/18/方法和函数的区别/</id>
    <published>2016-06-17T16:21:46.000Z</published>
    <updated>2016-06-19T11:04:52.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;link rel=&quot;stylesheet&quot; href=&quot;http://yandex.st/highlightjs/8.0/styles/solarized_dark.min.css&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;script src=&quot;http://yandex.st/highlightjs/8.0/highlight.min.js&quot;&gt;&lt;/script&gt;&lt;/p&gt;
&lt;p&gt;&lt;script&gt;hljs.initHighlightingOnLoad();&lt;/script&gt;&lt;/p&gt;
&lt;h1 id=&quot;关于方法和函数&quot;&gt;&lt;a href=&quot;#关于方法和函数&quot; class=&quot;headerlink&quot; title=&quot;关于方法和函数&quot;&gt;&lt;/a&gt;关于方法和函数&lt;/h1&gt;&lt;p&gt;通常我们来讲对实现某一具体功能的代码端我们称之为函数抑或方法.&lt;br&gt;但是方法和函数是有严格区别的，特别是在Objective-c 这样一门动态的一门语言&lt;/p&gt;
&lt;h2 id=&quot;方法&quot;&gt;&lt;a href=&quot;#方法&quot; class=&quot;headerlink&quot; title=&quot;方法&quot;&gt;&lt;/a&gt;方法&lt;/h2&gt;&lt;p&gt;通常我们口语中方法和函数基本上就是一回事，如下面的例子&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;- (int)sum:(int)a AndB:(int)b  
{
    return  a + b;  
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 我们看到这就定义了一个方法或者函数，但是真的就是这样吗？&lt;br&gt; 其实严格说来上面定义了一个函数，而不是方法，而方法指的仅仅是函数的名字，也就是&lt;code&gt;sum:  AndB:&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;Objective-c中方法&quot;&gt;&lt;a href=&quot;#Objective-c中方法&quot; class=&quot;headerlink&quot; title=&quot;Objective-c中方法&quot;&gt;&lt;/a&gt;Objective-c中方法&lt;/h3&gt;&lt;p&gt;Objective-c中的方法就是我门常用的&lt;code&gt;selector&lt;/code&gt;,一个&lt;code&gt;selector&lt;/code&gt;就是Objective-c的函数名字&lt;/p&gt;
&lt;h2 id=&quot;函数&quot;&gt;&lt;a href=&quot;#函数&quot; class=&quot;headerlink&quot; title=&quot;函数&quot;&gt;&lt;/a&gt;函数&lt;/h2&gt;&lt;p&gt;我们看一个在Objective-c函数的定义&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;struct objc_method 
{
    SEL method_name
    char *method_types
    IMP method_imp
}
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;一个函数包含了函数的名字&lt;code&gt;method_name&lt;/code&gt;，函数的类型&lt;code&gt;method_types&lt;/code&gt;以及&lt;code&gt;IMP&lt;/code&gt;(函数的实现)，    Objective-c，通过函数的名字以及所传参数就能找到函数的实现，继而执行函数的实现.&lt;br&gt;&lt;br&gt;其中method_types 是函数的签名，也就是函数类型，包含几个参数，每个参数的类型，以及返回值的类型，看这样一个类&lt;br&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;@interface NSMethodSignature : NSObject {
@private
    void *_private;
    void *_reserved[6];
}

+ (nullable NSMethodSignature *)signatureWithObjCTypes:(const char *)types;
@property (readonly) NSUInteger numberOfArguments;
- (const char *)getArgumentTypeAtIndex:(NSUInteger)idx NS_RETURNS_INNER_POINTER;
@property (readonly) NSUInteger frameLength;
- (BOOL)isOneway;
@property (readonly) const char *methodReturnType NS_RETURNS_INNER_POINTER;
@property (readonly) NSUInteger methodReturnLength;

@end
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt; 这个类就是函数签名类，包含参数的数量，每个参数的类型，函数返回值类型&lt;/p&gt;
</content>
    
    <summary type="html">
    
      通常我们来讲对实现某一具体功能的代码端我们称之为函数抑或方法.&lt;br&gt;但是方法和函数是有严格区别的，特别是在Objective-c 这样一门动态的一门语言
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="方法" scheme="http://www.denman.me/tags/%E6%96%B9%E6%B3%95/"/>
    
      <category term="函数" scheme="http://www.denman.me/tags/%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>关于runLoop那些事</title>
    <link href="http://www.denman.me/2016/06/18/%E5%85%B3%E4%BA%8ErunLoop%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://www.denman.me/2016/06/18/关于runLoop那些事/</id>
    <published>2016-06-17T16:21:09.000Z</published>
    <updated>2016-06-19T15:18:15.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="runLoop" scheme="http://www.denman.me/tags/runLoop/"/>
    
  </entry>
  
  <entry>
    <title>关于runtime那些事</title>
    <link href="http://www.denman.me/2016/06/18/%E5%85%B3%E4%BA%8Eruntime%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://www.denman.me/2016/06/18/关于runtime那些事/</id>
    <published>2016-06-17T16:20:34.000Z</published>
    <updated>2016-06-19T15:23:17.000Z</updated>
    
    <content type="html"></content>
    
    <summary type="html">
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="rumtime" scheme="http://www.denman.me/tags/rumtime/"/>
    
  </entry>
  
  <entry>
    <title>查看静态库文件支持的指令集架构的方法</title>
    <link href="http://www.denman.me/2015/03/13/%E6%9F%A5%E7%9C%8B%E9%9D%99%E6%80%81%E5%BA%93%E6%96%87%E4%BB%B6%E6%94%AF%E6%8C%81%E7%9A%84%E6%8C%87%E4%BB%A4%E9%9B%86%E6%9E%B6%E6%9E%84%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>http://www.denman.me/2015/03/13/查看静态库文件支持的指令集架构的方法/</id>
    <published>2015-03-13T03:45:30.000Z</published>
    <updated>2016-06-18T10:28:53.000Z</updated>
    
    <content type="html">&lt;p&gt;例如 现在 查看libogg.a支持的指令集&lt;br&gt;以管理员的身份在终端下进入libogg.a库文件所在目录，执行lipo -info ibogg.a如下&lt;br&gt;localhost:~ developer$ cd desktop&lt;br&gt;localhost:desktop developer$ cd SpeexRecord&lt;br&gt;localhost:SpeexRecord developer$ lipo -info libogg.a&lt;br&gt;Architectures in the fat file: libogg.a are: i386 armv6 armv7&lt;br&gt;结果 liboog.a支持的指令集架构为 inter 32位 armv6 32位 armv7 32位&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;例如 现在 查看libogg.a支持的指令集&lt;br&gt;以管理员的身份在终端下进入libogg.a库文件所在目录，执行lipo -info ibogg.a如下&lt;br&gt;localhost:~ developer$ cd desktop&lt;br&gt;localhost:desktop d
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://www.denman.me/tags/iOS/"/>
    
      <category term="64位" scheme="http://www.denman.me/tags/64%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>iOS的release和debug有什么区别</title>
    <link href="http://www.denman.me/2015/03/10/iOS%E7%9A%84release%E5%92%8Cdebug%E6%9C%89%E4%BB%80%E4%B9%88%E5%8C%BA%E5%88%AB/"/>
    <id>http://www.denman.me/2015/03/10/iOS的release和debug有什么区别/</id>
    <published>2015-03-10T06:23:36.000Z</published>
    <updated>2016-06-18T10:30:32.000Z</updated>
    
    <content type="html">&lt;p&gt;Release是发行版本,比Debug版本有一些优化，文件比Debug文件小 Debug是调试版本，Debug和Release调用两个不同的底层库。&lt;br&gt;一、”Debug是调试版本，包括的程序信息更多”&lt;br&gt;二、只有DEBUG版的程序才能设置断点、单步执行、使用TRACE/ASSERT等调试输出语句。&lt;br&gt;三、REALEASE不包含任何调试信息，所以体积小、运行速度快。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Release是发行版本,比Debug版本有一些优化，文件比Debug文件小 Debug是调试版本，Debug和Release调用两个不同的底层库。&lt;br&gt;一、”Debug是调试版本，包括的程序信息更多”&lt;br&gt;二、只有DEBUG版的程序才能设置断点、单步执行、使用TRAC
    
    </summary>
    
      <category term="technology" scheme="http://www.denman.me/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://www.denman.me/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>思念同学</title>
    <link href="http://www.denman.me/2015/03/06/%E6%80%9D%E5%BF%B5%E5%90%8C%E5%AD%A6/"/>
    <id>http://www.denman.me/2015/03/06/思念同学/</id>
    <published>2015-03-06T07:26:31.000Z</published>
    <updated>2016-06-15T15:40:59.000Z</updated>
    
    <content type="html">&lt;p&gt;去年今日今时月，&lt;/p&gt;
&lt;p&gt;同照你我苍白身。&lt;/p&gt;
&lt;p&gt;今年今日今时月，&lt;/p&gt;
&lt;p&gt;不见天涯万里人。&lt;/p&gt;
&lt;p&gt;他年今日同相见 ，&lt;/p&gt;
&lt;p&gt;月光长照酒杯中，&lt;/p&gt;
&lt;p&gt;一喝黄河八百里，&lt;/p&gt;
&lt;p&gt;二喝长江九曲湾。&lt;/p&gt;
&lt;p&gt;但愿长醉不复醒，&lt;/p&gt;
&lt;p&gt;梦中犹醉见杜康。&lt;/p&gt;
&lt;p&gt;杜康问我有何事，&lt;/p&gt;
&lt;p&gt;是否有酒共一杯。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      不知不觉毕业已经好长时间了，写下此篇文章，思念大学的同学
    
    </summary>
    
      <category term="life" scheme="http://www.denman.me/categories/life/"/>
    
    
      <category term="诗词" scheme="http://www.denman.me/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>孔雀东南飞-大学新篇</title>
    <link href="http://www.denman.me/2010/12/06/kongque/"/>
    <id>http://www.denman.me/2010/12/06/kongque/</id>
    <published>2010-12-06T05:05:37.000Z</published>
    <updated>2016-06-15T15:38:52.000Z</updated>
    
    <content type="html">&lt;p&gt;孔雀东南飞，五里一徘徊。七岁进小学，十二升小初。十五上高中，十八来烟大。高中三年间，早起晚上床。上课认真听，灯灭再自学。上学十二载，努力无白费。一路过高考，终愿大学梦。&lt;br&gt;怀揣心中大学梦，九月三号到烟台。天公爷爷不作美，瓢泼大雨浇我心。人人都夸烟台好，烟台果然错不了。绿树红花遍全城，透人心脾使人明。环境优美临大海，人民和谐团结好。报到军训结束后，正式上课开始了。三年高中吃多苦，大学一定享享福。别人早睡我晚起，老师讲课我睡觉。同学常去图书馆，我在网吧玩通宵。理智全被玩心盖，一心扑在网游上。谁知一过三四月，期末考试就来到。突然梦醒心自明，一句名言冲上天。人生百年能几何，荒草斜阳土坯间。时间流水东逝去，珍惜时间无荒废。遥看家乡父母颜，瑟瑟秋风吹人老。父母为我后背驼，我却不解父母情。为人子女不孝顺，猪狗不如枉为人。痛改前非去恶习，一心只为圣贤书。期末考试第一名，谁敢笑我楚狂人。莫悲往事愤钩沉，但看吾生焕新颜。沧桑颓废忆浮生，吾生发奋应向前。大学四年不能废，百万知识充自身。吾欲奋起千钧棒，意欲澄清万里埃。提携玉龙为国死，何计生前身后名。&lt;br&gt;吾生理想开公司，须知前路多重难。只要吾生意志坚，敢叫日月换新天。为此努力整四年，找份工作挣大钱。攒足金钱二十万，下海经商创佳业。邀请同学一大群，创办公司闯天地。生意兴隆通四海，财源滚滚汇八方。公司壮大如日升，全国开启连锁店。通南至北吾公司，从东到西邓家店。一位名人曾有云：“吃水不忘挖井人”。若能功成名就时，投资家乡共富裕。&lt;br&gt;后记：辛苦遭逢起一经，&lt;br&gt;为此奋斗十六载。&lt;br&gt;他年若得凌云志，&lt;br&gt;敢笑嘉诚不丈夫。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;孔雀东南飞，五里一徘徊。七岁进小学，十二升小初。十五上高中，十八来烟大。高中三年间，早起晚上床。上课认真听，灯灭再自学。上学十二载，努力无白费。一路过高考，终愿大学梦。&lt;br&gt;怀揣心中大学梦，九月三号到烟台。天公爷爷不作美，瓢泼大雨浇我心。人人都夸烟台好，烟台果然错不了。绿
    
    </summary>
    
      <category term="life" scheme="http://www.denman.me/categories/life/"/>
    
    
      <category term="诗词" scheme="http://www.denman.me/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
</feed>
