<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>denman&#39;s blog</title>
  
  <subtitle>热爱生活，专注技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://denmanboy.github.io/"/>
  <updated>2019-11-09T13:15:48.959Z</updated>
  <id>http://denmanboy.github.io/</id>
  
  <author>
    <name>denman</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>邮件APP竞品分析</title>
    <link href="http://denmanboy.github.io/2019/06/11/%E9%82%AE%E4%BB%B6App%E7%AB%9E%E5%93%81%E5%88%86%E6%9E%90/"/>
    <id>http://denmanboy.github.io/2019/06/11/邮件App竞品分析/</id>
    <published>2019-06-10T16:13:14.000Z</published>
    <updated>2019-11-09T13:15:48.959Z</updated>
    
    <content type="html"><![CDATA[ <div align="center"> <font size="6">邮件App竞品分析</font></div><p>[toc]</p><p>#1.项目背景<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<strong>邮件作为一个常用的工具类产品，是大家在工作和生活中，必不可少的工具，功能上大同小异，基本上都支持主流邮箱以及主流协议（IMAP4、POP3.SMTP4,Exchange),360安全邮件旨在提供给大家一个端到端，防泄漏的安全邮件客服端，基于此，着重分析市面上常见的邮件客户端，分析功能以及易用性，为360安全邮件扩展功能以及加强易用性做好铺垫。</strong></p><p>#2.竞品概述<br><strong>根据<a href="https://baijiahao.baidu.com/s?id=1622826714988005254&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">手机邮箱APP排行榜，网易第2新浪第8 你用的是哪个？</a>以及根据appstore上搜索出来的，特列出一下几款app作为竞品分析对象。</strong><br><code>QQ邮箱</code>、<code>网易邮箱大师</code>、<code>新浪邮箱</code>、<code>outLook</code>、<code>Gmail</code>、<code>沃邮箱</code>、<code>Hiibook</code>、<code>189邮箱</code>、<code>myMail</code>、<code>139邮箱</code> <code>系统邮箱</code>、<code>360安全邮件</code>。</p><p>#3.竞品目标功能及易用性对比<br>根据用户拉取邮件，发送邮件等基本需求为触发点从功能和易用性两个方面对比</p><p>##3.1.功能</p><p>###3.1.1.支持的协议&amp;加密连接</p><table align="center" width="100%"><br><th>QQ邮箱</th><br><th>新浪邮箱</th><br><th>网易邮箱大师</th><br><th>outLook</th><br><th>myMail</th><br><th>Gmail</th><br><tr><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0335.PNG" width="170" height="280"></td><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0336.PNG" width="170" height="280"></td><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0337.PNG" width="170" height="280"></td><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0338.PNG" width="170" height="280"></td><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0339.PNG" width="170" height="280"></td><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0340.PNG" width="170" height="280"></td><br></tr><br><tr><br><td>IMAP、POP、Exchange 均支持；<br>可以手动配置<br> 支持普通连接&amp;ssl连接，不支持startTLS</td><br><td>只支持内置的邮箱类型<br>比如sina.com、<br>163.com、126.com 加密类型未知</td><br><td>支持IMAP、POP、EXchange<br>可以手动配置，<br> 支持普通连接&amp;SSL连接&amp;StartSTS</td><br><td>IMAP、Exchange均支持，不支持POP，<br>支持手动配置;<br> SSL&amp;StartTLS未知</td><br><td>POP,IMAP,Exchange均支持，<br>支持手动配置，支持普通和SLL连接</td><br><td>支持IMAP、EXchange<br>可以手动配置，<br> 支持普通连接&amp;SSL&amp;StartTLS连接</td><br></tr><br></table><table align="center"><br><th>189邮箱</th><br><th>139邮箱</th><br><th>沃邮箱</th><br><th>Hiibook</th><br><th>系统邮箱</th><br><th>360全邮件</th><br><tr><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0341.PNG" width="130" height="250"></td><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0342.PNG" width="130" height="250"></td><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0345.PNG" width="130" height="250"></td><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0344.PNG" width="130" height="250"></td><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0360.PNG" width="130" height="250"></td><br><td align="center"><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0359.PNG" width="130" height="250"></td><br></tr><br><tr><br><td>IMAP、Exchange仅支持outLook，<br>支持手动配置;<br> 支持普通连接&amp;SSL连接</td><br><td>IMAP,Exchange仅支持outLook，<br>不支持支持手动配置，SSL未知<br></td><br><td>支持IMAP、POP、EXchange仅支持hotMail<br>可以手动配置，<br> 支持普通连接&amp;SSL</td><br><td>支持IMAP、POP、EXchange仅支持Outlook.com<br>可以手动配置，<br> 支持普通连接&amp;SSL连接</td><br><td>支持IMAP、POP、EXchange<br>可以手动配置，<br> 是否支持SSL连接未知</td><br><td>支持IMAP、POP、EXchange<br>可以手动配置，<br> 支持普通连接&amp;SSL&amp;StartTLS连接</td><br></tr><br></table><p>###3.1.2.发送邮件时支持的附件来源</p><table align="center" width="100%"><br><tr><br><th>QQ邮箱</th><br><th>新浪邮箱</th><br><th>网易邮箱大师</th><br><th>Outlook</th><br><th>myMail</th><br><th>GMail</th><br></tr><br><tr><br><td>图库、照相机、收藏的附件、手机文件APP文档、本地磁盘内容（Android）</td><br><td>图库、照相机、收藏的附件,本地磁盘内容(Android)</td><br><td>图库、照相机、手机文件APP文档、本地磁盘内容(Android)、网盘(Android)</td><br><td>图库、照相机、本地APP内文件、本地磁盘内容(Android)</td><br><td>图库、照相机、手机文件APP文档、本地磁盘内容（Android）</td><br><td>图库、本地磁盘内容(Android)</td><br></tr><br></table><table align="center" width="100%"><br><tr><br><th>189邮箱</th><br><th>139邮箱</th><br><th>沃邮箱</th><br><th>Hiibook</th><br><th>系统邮箱</th><br><th>360安全邮件</th><br></tr><br><tr><br><td>图库、照相机、 本地磁盘内容(Android)、网盘(Android)</td><br><td>图库、照相机、收藏的附件</td><br><td>图库、照相机、收藏的附件</td><br><td>图库、照相机、收藏的附件</td><br><td>图库、照相机,手机文件APP文档,自定义的涂鸦</td><br><td>图库、照相机</td><br></tr><br></table><p>##3.2.易用性</p><p>###3.2.1.UI布局&amp;导航&amp;颜色</p><table align="center" width="100%"><br><tr><br><th>QQ邮箱</th><br><th>新浪邮箱</th><br><th>网易邮箱大师</th><br><th>Outlook</th><br><th>myMail</th><br><th>GMail</th><br></tr><br><tr><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0348.PNG" width="120"><br></td><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0349.PNG" width="120"><br></td><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0350.PNG" width="120"><br></td><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0351.PNG" width="110"><br></td><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0352.PNG" width="120"><br></td><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0353.PNG" width="130"><br></td><br></tr><br><tr><br><td>单页面，栈底页面的右上角’+‘号按钮为写信、设置、扫描文件入口，<strong>整体UI风格为白色</strong><br></td><br><td>单页面，栈底页面的左上角为设置入口，<strong>整体UI风格为白色</strong><br></td><br><td>抽屉导航并且下面有4个tab（邮件、代办、通讯录、我），<strong>整体UI为白色</strong>，且侧滑时，主页面的navigationBar发生变化显示不同的按钮以及title，右上角”+”号按钮为<code>写邮件</code><code>新建代办</code><code>扫一扫</code><code>添加邮箱</code>的入口</td><br><td>抽屉导航，抽屉页面左下角为设置入口，主页面为蓝色navigationBar，且整体的导航也比较大<strong>整体UI为白色，下面有3个tab(邮件,搜索，日历)，主页右上角为写信入口</strong></td><br><td>抽屉导航，除了主页面右上角有写信的入口外，所有的入口都在抽屉页面，<stong>整体UI白色为主且部分按钮为红色</stong></td><br><td> 抽屉导航，除了主页面右上角有添加账号入口，所有的入口都在抽屉页面，<stong>整体UI白色为主按钮图标为灰色，在主页面底部为有一个<strong>很大的浮动按钮–写信页面入口</strong></stong></td><br></tr><br></table><br><table align="center" width="100%"><br><tr><br><th>189邮箱</th><br><th>139邮箱</th><br><th>沃邮箱</th><br><th>Hiibook</th><br><th>系统邮箱</th><br><th>360安全邮件</th><br></tr><br><tr><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0354.PNG" width="130"><br></td><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0355.PNG" width="130"><br></td><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0356.PNG" width="130"><br></td><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0357.PNG" width="130"><br></td><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0361.PNG" width="130"><br></td><br><td align="center" width="16.6%"><br><img src="http://pztp4myf5.bkt.clouddn.com/IMG_0362.PNG" width="130"><br></td><br></tr><br><tr><br><td>抽屉导航，抽屉页面左下角为添加邮箱入口，侧滑页面为天空蓝色<strong>整体UI为白色，下面有4个tab(邮件,日程,通讯录、我的)，主页右上角为写信入口</strong></td><br><td>抽屉导航，抽屉页面左上角为添加邮箱入口，<strong>整体UI为白色，下面有4个tab(邮件,联系人,发现、我的)，主页右上角为写信入和搜索入口</strong></td><br><td>抽屉导航，侧滑页面底部有4个并列按钮(反馈，代办，收藏的附近、设置)，<strong>整体UI为白色，下面有4个tab(沟通,脉动,发现(内嵌H5页面)、会员(内嵌H5页面))，主页右下角浮动按钮为写信入口</strong></td><br><td> 抽屉导航，侧滑页面底部有2个并列按钮(扫一扫，设置)，上部有分享用户二维码信息，<strong>整体UI为深蓝色，下面有3个tab(邮件、通讯录、秘会)，主页导航右上角为写信入口</strong></td><br><td>系统全局设置账号，整体UI为白色，每个MailList页面下面都有写信入口</td><br><td>侧滑导航，整体UI为蓝色，下面有4个tab（邮件、日历、联系人、设置），主页面右上角为写信入口</td><br></tr><br><br></table><p>###3.2.2.VPN开启下是否支持360邮箱（走Exchange协议）</p><table align="center"><br><tr><br><th>QQ邮箱</th><br><th>新浪邮箱</th><br><th>网易邮箱大师</th><br><th>OutLook</th><br><th>myMail</th><br><th>Gmail</th><br></tr><br><tr><br><td align="center" width="16.6%">支持</td><br><td align="center" width="16.6%">不支持</td><br><td align="center" width="16.6%">支持</td><br><td align="center" width="16.6%">不支持</td><br><td align="center" width="16.6%">不支持</td><br><td align="center" width="16.6%">不支持</td><br></tr><br><tr><br></tr></table><br><table align="center" width="100%"><br><tr><br><th>189邮箱</th><br><th>139邮箱</th><br><th>沃邮箱</th><br><th>Hiibook</th><br><th>360安全邮件</th><br><th>系统邮箱</th><br></tr><br><tr><br><td align="center" width="16.6%">不支持</td><br><td align="center" width="16.6%">不支持</td><br><td align="center" width="16.6%">不支持</td><br><td align="center" width="16.6%">不支持</td><br><td align="center" width="16.6%">支持</td><br><td align="center" width="16.6%">支持</td><br></tr><br></table><p>###3.2.3.拉取速度(在4G网络vpn下，以支持360.net邮箱中的收件箱上拉刷新为例)</p>&lt;table align=”center” width=”100%”&gt;<br><tr><br><th>QQ邮箱</th><br><th>网易邮箱大师</th><br><th>360安全邮件</th><br><th>系统邮箱</th><br></tr><br><tr><br><td>很快，几乎2妙级</td><br><td>较快，几乎5妙级</td><br><td>较快，几乎4妙级</td><br><td>较快，几乎3妙级</td><br></tr><br><h3 id="3-2-4-各个邮件App端详情"><a href="#3-2-4-各个邮件App端详情" class="headerlink" title="3.2.4.各个邮件App端详情"></a>3.2.4.各个邮件App端详情</h3><h4 id="3-2-4-1-QQ邮箱"><a href="#3-2-4-1-QQ邮箱" class="headerlink" title="3.2.4.1 QQ邮箱"></a>3.2.4.1 QQ邮箱</h4><table><br><tr><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0373.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0371.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0372.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0374.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0427.PNG"></td><br></tr><br><tr><br><td>首页简介明了，且添有添加账号快捷入口，方便用户操作</td><br><td>邮件详情页，下拉出现快捷回复窗口，非常方便用户及时回复</td><br><td>在详情页还支持用户打印，分享到社交程序</td><br><td>支持邮件推送</td><br><td>支持OCR扫描文件，快速提取文字</td><br></tr><br></table><h4 id="3-2-4-2-新浪邮箱"><a href="#3-2-4-2-新浪邮箱" class="headerlink" title="3.2.4.2 新浪邮箱"></a>3.2.4.2 新浪邮箱</h4><table><br><tr><br><td width="25%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0375.PNG"></td><br><td width="25%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0376.PNG"></td><br><td width="25%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0377.PNG"></td><br><td width="25%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0378.PNG"></td><br></tr><br><tr><br><td>邮箱账号点击可以收起和展开该账号下的文件夹，方便用户查看，增加可视面积</td><br><td>在设置页面，支持3种主题，特别是暗黑主题，和MacOS保持一致，让用户眼睛没有视觉疲劳</td><br><td>在邮件列表页，第一行嵌入广告，点击进出是H5页面</td><br><td>邮件列表页，左滑删除，提出UI框，动画非常优美</td><br></tr><br></table><h4 id="3-2-4-3-网易邮箱大师"><a href="#3-2-4-3-网易邮箱大师" class="headerlink" title="3.2.4.3 网易邮箱大师"></a>3.2.4.3 网易邮箱大师</h4><table width="100%"><br><tr><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0379.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0381.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0382.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0383.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0386.PNG"></td><br></tr><br><tr><br><td>内嵌购物页面，用户使用邮件的同时，遇到推荐比较好的物品，随时购买</td><br><td>在邮件列表页，用户左滑删除，下方立马提示是否撤销操作，防止用户误操作</td><br><td>邮件列表页，点击加号出现新加代办，新加代码直接出现在页面的最上面，直接输入，可以添加时间</td><br><td>邮件列表页页，点击漏斗按钮，可以直接出现筛选页面，方便用户快捷筛选</td><br><td>在已删除页面，左滑删除时，红色按钮着重提示是彻底删除，并且在几秒内提示，是否撤销，<strong>如果几秒内没有操作，就是彻底删除<strong></strong></strong></td><br></tr><br></table><h4 id="3-2-4-4-outLook"><a href="#3-2-4-4-outLook" class="headerlink" title="3.2.4.4 outLook"></a>3.2.4.4 outLook</h4><table width="100%"><br><tr><br><td width="25%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0387.PNG"></td><br><td width="25%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0389.PNG"></td><br><td width="25%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0390.PNG"></td><br><td width="25%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0392.PNG"></td><br></tr><br><tr><br><td>一个搜索页面，支持邮件，联系人，文件快速检索，方便用户</td><br><td>邮件详情页，下面有快速回复框，不用转到写信页面，方便用户快捷回复，且在输入框右上角有按钮，点击直接转到写信页面</td><br><td>支持EXchange日历功能</td><br><td><strong>在设置页，可以自定义在有列表页item滑动出现的功能选项</strong></td><br></tr><br></table><h4 id="3-2-4-5-myMail"><a href="#3-2-4-5-myMail" class="headerlink" title="3.2.4.5 myMail"></a>3.2.4.5 myMail</h4><table width="100%"><br><tr><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0399.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0394.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0398.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0395.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0397.PNG"></td><br></tr><br><tr><br><td>邮件列表页发件人如果是知名的邮箱就显示该邮箱的公司icon，且左滑动功能较多，入口方便</td><br><td>点击按钮直接显示搜索页面，不用让用户离开该页面，且可以指定筛选主题</td><br><td>在搜索中的命题中可以再次根据未读已读，过滤</td><br><td>邮件列表页，嵌入广告，引导用户</td><br><td>三级联动，UI交互比较炫</td><br></tr><br></table><h4 id="3-2-4-6-Gmail"><a href="#3-2-4-6-Gmail" class="headerlink" title="3.2.4.6 Gmail"></a>3.2.4.6 Gmail</h4><table width="100%"><br><tr><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0402.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0401.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0404.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0400.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0403.PNG"></td><br></tr><br><tr><br><td>在邮件列表页可以直接，可以直接点击，快速增加标记 </td><br><td>用户列表页长按，出现导航条，可以多选，可以删除，已读未读</td><br><td>在有奖详情页，上拉到页面底部，出现回复和转发</td><br><td>回复和转发页面，可以随意切换回复和转发，方便用户</td><br><td>邮件详情页，可以打印当前文件</td><br></tr><br></table><h4 id="3-2-4-7-189邮箱"><a href="#3-2-4-7-189邮箱" class="headerlink" title="3.2.4.7 189邮箱"></a>3.2.4.7 189邮箱</h4><table width="100%"><br><tr><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0405.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0408.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0407.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0406.PNG"></td><br></tr><br><tr><br><td>抽屉页面，点击账号可以收起和展开，显得比较整洁</td><br><td>抽屉页面收起</td><br><td>可以更改策划页面皮肤</td><br><td>我的页面-商城</td><br></tr><br></table><h4 id="3-2-4-8-139邮箱"><a href="#3-2-4-8-139邮箱" class="headerlink" title="3.2.4.8 139邮箱"></a>3.2.4.8 139邮箱</h4><table width="100%"><br><tr><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0412.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0409.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0410.PNG"></td><br><td width="20%"> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0411.PNG"></td><br></tr><br><tr><br><td>在抽屉视图弹出全部文件夹，可以设置显示顺序，以及显示哪些文件夹，方便用户使用</td><br><td>附件管理，提供一个全面的页面，可以统一查看所有的本地附件，可以分类查看</td><br><td>可以分享客户端给社交用户，推广app</td><br><td>在联系人页面，可以直接点击信封按钮，直接给该联系人发送邮件</td><br></tr><br></table><h4 id="3-2-4-9-沃邮箱"><a href="#3-2-4-9-沃邮箱" class="headerlink" title="3.2.4.9 沃邮箱"></a>3.2.4.9 沃邮箱</h4><table width="100%"><br><tr><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0413.PNG"></td><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0414.PNG"></td><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0415.PNG"></td><br></tr><br><tr><br><td>邮件列表页，右滑出现功能页面，方便用户操作，快捷入口</td><br><td>点击闪电回复，对一些常规的回复，特别快，方便用户快捷回复</td><br><td>返现页签，增加商业属性，方便用户日常需求</td><br></tr><br></table><h4 id="3-2-4-10-Hiibook"><a href="#3-2-4-10-Hiibook" class="headerlink" title="3.2.4.10 Hiibook"></a>3.2.4.10 Hiibook</h4><table width="100%"><br><tr><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0416.PNG"></td><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0417.PNG"></td><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0418.PNG"></td><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0419.PNG"></td><br></tr><br><tr><br><td>抽屉页面支持会话邮件（像IM）和主题式邮件</td><br><td>可以分享直接名片，可以扫码直接添加</td><br><td>在邮件页面，可以直接点击邮箱出现下拉框，直接添加账号，方便用户</td><br><td>在联系人页面，可以多选用户，直接反送邮件</td><br></tr><br></table><h4 id="3-2-4-11-360安全邮件"><a href="#3-2-4-11-360安全邮件" class="headerlink" title="3.2.4.11 360安全邮件"></a>3.2.4.11 360安全邮件</h4><table width="100%"><br><tr><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0420.PNG"></td><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0421.PNG"></td><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0422.PNG"></td><br></tr><br><tr><br><td align="center">文件夹支持分级</td><br><td align="center">支持写日程</td><br><td align="center">支持发送会议</td><br></tr><br></table><h4 id="3-2-4-12-系统邮箱"><a href="#3-2-4-12-系统邮箱" class="headerlink" title="3.2.4.12 系统邮箱"></a>3.2.4.12 系统邮箱</h4><table width="100%"><br><tr><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0423.PNG"></td><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0424.PNG"></td><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0425.PNG"></td><br><td> <img src="http://pztp4myf5.bkt.clouddn.com/IMG_0426.PNG"></td><br></tr><br><tr><br><td align="center">文件夹支持分级</td><br><td align="center">写邮件可以随时在文本域插入图片，视频，涂鸦</td><br><td align="center">左滑直接快捷删除，旗标，以及更多功能</td><br><td align="center">可定制左滑出现的功能</td><br></tr><br></table><p>##3.3.各自特色</p><table align="center" width="100%"><br><tr><br><th>QQ邮箱</th><br><th>新浪邮箱</th><br><th>网易邮箱大师</th><br><th>OutLook</th><br><th>myMail</th><br><th>GMail</th><br></tr><br><tr><br><td>页面简洁，功能集中就是拉取、收发邮件，没有其他东西，入口都是在右上角一个按钮中,且发送邮件支持<strong>富文本还有地理位置</strong></td><br><td>页面清爽，有一键换肤功能，且有有积分商城可以换取东西，增加用户粘度</td><br><td>具有代办事项，可以添加提醒</td><br><td>支持<strong>日历功能<strong>，且在主页面tableView 左右滑动可以定制不同功能</strong></strong></td><br><td>页面简洁，预埋一些app连接，引导用户下载，且在MailList页面滑动时，导航隐藏，增加可视面积，发送页面支持<strong>贴纸、微笑、模板</strong></td><br><td>mailList页面可以看到附件，<strong>直接点击就可以看到附件详情</strong></td><br></tr><br></table><br><table align="center" width="100%"><br><tr><br><th>189邮箱</th><br><th>139邮箱</th><br><th>沃邮箱</th><br><th>Hiibook</th><br><th>系统邮箱</th><br><th>360安全邮件</th><br></tr><br><tr><br><td>支持个性化一键换肤功能，支持日程功能，且日程只支持189邮箱，<strong>里面有特惠商城-电子商务功能</strong></td><br><td>可以设置文字大小，调整文件夹顺序，<strong>发现tab-O2O</strong></td><br><td>下面tab发现页内嵌H5-O2O功能</td><br><td><strong>分为会话式邮件&amp;主题式邮件，会话IM式聊天，主题正常式邮件，支持语音,支持秘会，支持查看所有的邮件附件，联系人可以通过二维码分享，扫一扫添加好友</strong></td><br><td>简介明了，<strong>mailList左滑右滑动定制，写信支持富文本，支持S/Mime</strong></td><br><td><strong>双因子，支持客户端加密</strong></td><br></tr><br></table><p>#4.竞品分析与总结</p><p>##4.1 总体分析</p><p><br><strong><br>1.针对以邮件App分析，从功能上大同小异，都能满足日常的邮件发送需求，但邮箱标榜的支持Exchange协议，但只有QQ邮箱、网易邮箱大师、360安全邮件、系统邮箱支持。<br></strong><br></p><br><p><br><strong><br>2.UI上基本上都已抽屉导航为主，在抽屉页显示设置按钮，和一些不是常用的功能。<br></strong><br></p><br><p><br><strong><br>3.像Outlook，myMail，支持Exchang邮箱，但咱们公司的邮箱始终登录不上。<br></strong><br></p><br><p><br><strong><br>3.各个邮件侧重点不同，特别是写信页面，可以添加的附件来源不同，有些还支持富文本，有些还添加了020功能。<br></strong><br></p><br><p><strong><br>4.其中抽屉视图交互最好的myMail，三级菜单联动侧滑出现邮箱页，添加账号，设置页，非常流畅酷炫。<br><strong></strong></strong></p><br><p><br>5.除了系统邮箱和360安全邮件支持发送失败，自动再次发送外，其他均不支持。<br><strong></strong></p><br>6.所有邮箱都支持邮件推送通知。<br><p><strong><br>7.有些邮箱增加了咨询功能，方便用户随地阅读新闻。<br></strong></p><br>8.有些邮箱还增加了电子商务功能，推荐一些商品，方便用户购买。<br><p><strong><br>9.有些邮件邮件分两种模式-主题式邮件（就是平常得到邮件收发），一种是会话是邮件（很像IM聊天那种）。<br></strong></p><br><p><strong><br>10.有些邮箱增加了分享功能，扩大app的影响力。<br></strong></p><p>##4.2 功能对比</p><p>##4.2.1 别的app有的功能，360安全邮件没有的</p><table><br><tr><br><th width="33.3%">QQ邮箱 </th><br><th width="33.3%">新浪邮箱 </th><br><th width="33.3%">网易邮箱大师</th><br></tr><br><tr><br><td>1.以特殊的页面显示出支持的邮箱，并且可以自定义<br>2.支持OCR提取文字信息;<br>3.可以选择拒收，拒收以后，邮件自动移动到已删除;<br>4.可以以PDF文件的格式分享正文；<br>5.可以标记为广告邮件和非广告邮件<br>6.支持打印 7.mailList页面支持头像 <br>8.可以设置全局文字大小 9.支持选择网路类型下下载正文的图片<br> 9.支持黑名单 <br>10.支持语音输入日历事件</td><br><td>1.支持点击邮箱自动收齐和展开邮箱内的文件夹<br> 2.支持看新闻，财经热榜，色彩主题 <br>3.支持从收藏的附件中添加附件 <br>4.支持通讯录（本地和手机通讯录）</td><br><td>1.支持扫一扫<br>2.支持好货(一些精选物品，引导用户购买）<br><br>3.支持多语音<br> 4.支持选择回复转发前缀<br> 5.支持个性皮肤<br> 6.我的页面支持随机广告 <br> 7.支持点击通讯录某一个人发送邮件<br> 8.支持合并重复联系人<br> 9.在邮件列表页支持快捷创建代办<br></td><br></tr><br></table><table><br><tr><br><th width="33.3%">Outlook</th><br><th width="33.3%">myMail</th><br><th width="33.3%">189邮箱</th><br></tr><br><tr><br><td>1.邮件列表页支持左滑动，右滑动自定义功能 <br>2.支持是否开启重点收件箱<br> 3.邮件列表页支持刷选未读、已标记、附件 4.支持分享Outlook</td><br><td>1.侧滑三级联动，一级显示设置，一级显示邮箱下的文件夹，一级显示当前文件夹<br> 2.邮件列表左滑动出现的功能较多(阅读、标记、移动、垃圾邮件、删除) 3.在邮件列表页，上拉，导航条自动隐藏，增加可是区域 <br> 4.邮件列表页内嵌广告 5.支持添加文件夹 6.支持本地过滤（基本和Outlook的规则一样 7.支持内置浏览器和外置浏览器打开）<br> 7.支持打印 <br>8.邮件详情页导航条可以随着tableview的移动自动隐藏</td><br><td>1.侧滑页支持点击邮箱收起和展开文件夹<br> 2.支持二维码登录<br> 3.支持回复时是欧服引用原文<br> 4.支持载入邮件数<br> 5.支持邮箱会话模式 </td><br> </tr><br></table><table width="100%"><br><tr><br><th width="25%">139邮箱</th><br><th width="25%">沃邮箱</th><br><th width="25%">Hibook</th><br><th width="25%">系统邮箱</th><br></tr><br><tr><br><td>1.支持本页面筛选已读未读<br> 2.支持文件夹排序<br> 3.支持在联系人详情页直接发送邮件 <br> 4.支持查看往来邮件<br> 5.在联系人详情页直接点击发送邮件<br> 6.发送邮件时，会检查网络<br></td><br><td>1.发现内嵌咨询页，可以阅读实时新闻<br> 2.支持闪电回复，可以自定义 <br>3.支持设置回复是否带上原文<br>4.支持显示本地所有附件<br> 5.支持快捷回复<br> 6.支持创建代办事项<br></td><br><td>1.支持二维码分享名片 <br> 2.支持会话式和主题式邮件<br> 3.支持App分享<br> 4.支持显示本地所有附件 <br> 5.支持新建秘会<br> 6.支持语音输入转文字</td><br><td>1.邮件列表页支持已读未读过滤<br> 2.支持自己图画涂鸦嵌入邮件正文中<br> 3.支持单独标记”有人回复此邮件主题时通知我”<br> 4.支持自动回复  5.发件箱支持下拉刷新，发送未发送的邮件<br> 6.邮件文件夹分级</td><br></tr><br></table><p>##4.2.2 360有的， 别的app没有的功能，</p><table width="100%"><br><tr><br><th>360安全邮件</th><br></tr><br><tr><br><td><br>1.发送失败，下次自动发送<br><br>2.Exchange支持日历(发送日程和会议)<br><br>3.360ID双因子登录，多层保护<br><br>3.安全邮件附件加密<br></td><br></tr><br></table><p>参考</p><blockquote><p><a href="https://www.zhihu.com/question/17086049" target="_blank" rel="noopener">怎样做一份良好的竞品分析？通常有哪些方法？</a><br><a href="https://max.book118.com/html/2017/0728/124871893.shtm" target="_blank" rel="noopener">邮箱产品竞品分析.pdf</a><br><a href="https://baijiahao.baidu.com/s?id=1622826714988005254&amp;wfr=spider&amp;for=pc" target="_blank" rel="noopener">手机邮箱APP排行榜，网易第2新浪第8 你用的是哪个？</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      着重分析市面上常见的邮件，取其精华去其糟粕，安全，以支持邮件协议。
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="邮件" scheme="http://denmanboy.github.io/tags/%E9%82%AE%E4%BB%B6/"/>
    
      <category term="安全" scheme="http://denmanboy.github.io/tags/%E5%AE%89%E5%85%A8/"/>
    
  </entry>
  
  <entry>
    <title>如何写一份简历</title>
    <link href="http://denmanboy.github.io/2019/02/28/%E5%A6%82%E4%BD%95%E5%86%99%E4%B8%80%E4%BB%BD%E7%AE%80%E5%8E%86/"/>
    <id>http://denmanboy.github.io/2019/02/28/如何写一份简历/</id>
    <published>2019-02-28T12:02:44.000Z</published>
    <updated>2019-03-03T02:13:08.304Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script><link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">  <script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script>  <script>hljs.initHighlightingOnLoad();</script><p>到底如何写一份引人醒目的简历， 有以下几点需要强调<br>说白了就是如何营销自己</p><h1 id="1-要突出核心竞争力"><a href="#1-要突出核心竞争力" class="headerlink" title="1.要突出核心竞争力"></a>1.要突出核心竞争力</h1><p><strong>什么是核心竞争力，就是不可代替性。</strong><br>举个非常简单的例子，你是做运营的，核心竞争力就是用户拉新，提高用户留存、活跃率、数据分析的能力。<br>你是做开发的，精通语言，熟悉框架源码，了解底层原理这就是核心竞争力。</p><h1 id="2-要有亮点"><a href="#2-要有亮点" class="headerlink" title="2.要有亮点"></a>2.要有亮点</h1><p><strong>什么是亮点就是和别人不一样的地方，说白了就是与众不同的地方，让别人一眼就能记住你，突出自己的能力。</strong><br>举个例子 你是做销售的 就要列出一下几点 </p><ol><li>做过最大销售额的成绩 </li><li>做过最高利润额的成绩 </li><li>赢得最忠实客户的合作时间</li><li>客户证明人名单</li><li>赢得最著名企业合作的名单</li></ol><h1 id="3-要有关键词（非常重要）"><a href="#3-要有关键词（非常重要）" class="headerlink" title="3.要有关键词（非常重要）"></a>3.要有关键词（非常重要）</h1><p><strong>为什么这么说，每天hr都会收到大量的简历，hr如何能快速地从大量的简历中挑选出来呢，就是通过关键词，就像你在百度中输了一个关键词，百度就是通过关键词的匹配程度排序的 ，hr亦是如此。</strong><br>每个行业都有自己的关键词<br>关键词又分主观词和客观词<br>主观词像”精通“、”熟悉“、“独立完成”，自动加班等等<br>客观就是本专业的专业术语</p><h1 id="4-要用数字说话"><a href="#4-要用数字说话" class="headerlink" title="4.要用数字说话"></a>4.要用数字说话</h1><p><strong>为什么说要用数字说话，因为数字最直观，最能突出自己的能力。</strong><br>比方说一年发了多少个版本，pv多少，留存率多少，优化之前是多少，优化之后提升了多少等等。</p>]]></content>
    
    <summary type="html">
    
      到底如何写一份引人醒目的简历， 有以下几点需要强调说白了就是如何营销自己
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://denmanboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>2019年第一场雪</title>
    <link href="http://denmanboy.github.io/2019/02/12/2019%E5%B9%B4%E7%AC%AC%E4%B8%80%E5%9C%BA%E9%9B%AA/"/>
    <id>http://denmanboy.github.io/2019/02/12/2019年第一场雪/</id>
    <published>2019-02-12T01:44:42.000Z</published>
    <updated>2019-11-03T10:37:27.291Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script> <div align="center"><br><br>昨夜春风送万里，<br>满城梨花与飞絮。<br>萦空如雾飘飘然，<br>坐看青竹变琼枝。<br><br><img src="/images/D100186C-C4D4-456F-95DE-C80DCB3CFFC9.jpg"><br></div>]]></content>
    
    <summary type="html">
    
      过年后的第一场雪
    
    </summary>
    
      <category term="life" scheme="http://denmanboy.github.io/categories/life/"/>
    
    
      <category term="风景" scheme="http://denmanboy.github.io/tags/%E9%A3%8E%E6%99%AF/"/>
    
  </entry>
  
  <entry>
    <title>iOS逆向砸壳分享</title>
    <link href="http://denmanboy.github.io/2019/01/17/iOS%E9%80%86%E5%90%91%E7%A0%B8%E5%A3%B3%E5%88%86%E4%BA%AB/"/>
    <id>http://denmanboy.github.io/2019/01/17/iOS逆向砸壳分享/</id>
    <published>2019-01-17T09:51:44.000Z</published>
    <updated>2019-01-19T06:18:16.494Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script><link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">  <script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script>  <script>hljs.initHighlightingOnLoad();</script><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>主要介绍iOS端逆向分析流程及相关操作工具使用。</p><p>起因：开发者提交到AppStore的App都是经过FairPlay作为版权保护而加密的，经过加密的App无法被Class-Dump，逆向过程中需要先对App脱壳之后才可以进行分析。</p><p>原理：在iOS系统中，可执行文件及动态库都是使用DYLD加载执行，在该过程中，系统先进行DRM检查，检查通过则会从App的可执行文件中选择适合该设备架构的Mach-O镜像进行解密，然后载入到内存中执行，这个过程中解密操作已经完成，解密工具并不做解密操作，而是遍历loadcommand中所有的LC_ENCRYPTION_INFO的信息，将对应解密后的数据从内存中dump出来复写到Mach-O文件中生成新的镜像文件。</p><p>dumpdecrypted解密原理：<a href="http://www.cocoachina.com/ios/20180415/23015.html" target="_blank" rel="noopener">http://www.cocoachina.com/ios/20180415/23015.html</a></p><h1 id="砸壳所需条件"><a href="#砸壳所需条件" class="headerlink" title="砸壳所需条件"></a>砸壳所需条件</h1><h2 id="硬件设备"><a href="#硬件设备" class="headerlink" title="硬件设备"></a>硬件设备</h2><p> 越狱手机（设备型号为64位机，否则砸壳以后所得二进制文件只支持armv7指令集无法在64位机上安装使用）</p><h2 id="软件设备"><a href="#软件设备" class="headerlink" title="软件设备"></a>软件设备</h2><p> 越狱手机需要安装：OpenSSH / Cycript</p><h1 id="砸壳工具"><a href="#砸壳工具" class="headerlink" title="砸壳工具"></a>砸壳工具</h1><h2 id="Clutch"><a href="#Clutch" class="headerlink" title="Clutch"></a>Clutch</h2><p>  Clutch：下载地址：<a href="https://github.com/KJCracks/Clutch/releases" target="_blank" rel="noopener">https://github.com/KJCracks/Clutch/releases</a></p><h3 id="Clutch-砸壳步骤"><a href="#Clutch-砸壳步骤" class="headerlink" title="Clutch 砸壳步骤"></a>Clutch 砸壳步骤</h3><p> 1.越狱手机和Mac需接入同一个无线网，SSH到越狱手机<br> 2.将下载好的Clutch拷贝到越狱手机的/usr/bin目录下，增加Clutch的可执行权限 chmod a+x Clutch<br> 3.打开越狱手机上的Terminal：<br>输入指令:<br>–&gt;su：获取最高权限；<br>–&gt;Clutch -i：查看设备上已安装的app<br>–&gt;Clutch -d + app序号：开始执行砸壳</p><h2 id="Dumpdecrypted"><a href="#Dumpdecrypted" class="headerlink" title="Dumpdecrypted"></a>Dumpdecrypted</h2><p>  Dumpdecrypted：下载地址:<a href="https://github.com/stefanesser/dumpdecrypted" target="_blank" rel="noopener">https://github.com/stefanesser/dumpdecrypted</a></p><h3 id="Dumpdecrypted步骤"><a href="#Dumpdecrypted步骤" class="headerlink" title="Dumpdecrypted步骤"></a>Dumpdecrypted步骤</h3><p>1.下载完dumpdecrypted，进去下载目录执行–&gt;make：编译动态库dumpdecrypted.dylib，该动态库是需要拷贝到设备目录下的，拷贝之前需要对该动态库进行签名执行–&gt;codesign –force –verify –verbose –sign “iPhone Developer: xxx xxxx (xxxxxxxxxx)” dumpdecrypted.dylib<br>2.SSH连接到越狱手机，开始执行命令<br>–&gt;su mobile<br>–&gt;ps -e | grep AppName：（AppName为解压ipa包之后ipa二进制文件名）, 之后会输出该app的可执行文件路径:以抖音为例：/var/containers/Bundle/Application/B87A9490-A41E-4C09-98DB-6E77E6200FF1/Aweme.app/Aweme<br>3.–&gt;cycript -p AppName:（锁定该app）<br>–&gt;[[NSFileManager defaultManager] URLsForDirectory:NSDocumentDirectory inDomains:NSUserDomainMask][0]:（后面会输出Documents路径）/var/mobile/Containers/Data/Application/F5621336-6837-4E0C-A532-C26C654B30F8/Documents/<br>4.–&gt;scp dumpdecrypted.dylib 到上面获得的Documents下<br>–&gt;DYLD_INSERT_LIBRARIES=dumpdecrypted.dylib + 砸壳App路径<br>执行之后的AppName.decrypted就是我们需要的脱壳之后的二进制文件</p><h2 id="Frida"><a href="#Frida" class="headerlink" title="Frida"></a>Frida</h2><p>环境配置：<br>iOS端：打开cydia添加源：<a href="https://build.frida.re,打开刚添加的源安装frida" target="_blank" rel="noopener">https://build.frida.re,打开刚添加的源安装frida</a><br>Mac端：安装python，wget，pip依赖工具，利用pip进行frida安装：sudo pip install frida<br>配置frida-ios-dump环境：从github下载工程：sudo mkdir /opt/dump &amp;&amp; cd /opt/dump &amp;&amp; sudo git clone <a href="https://github.com/AloneMonkey/frida-ios-dump，安装依赖：" target="_blank" rel="noopener">https://github.com/AloneMonkey/frida-ios-dump，安装依赖：</a><br>–&gt;sudo pip install -r /opt/dump/frida-ios-dump/requirements.txt –upgrade<br>开始执行砸壳：<br>usb连接到设备：Mac端新开终端输入：<br>–&gt;cd frida-ios-dump目录<br>–&gt;./dump.py l:查看设备上已安装的应用<br>–&gt;/dump.py +应用名称：开始砸壳<br>砸壳成功之后会自动拷贝回到frida-ios-dump目录</p><h1 id="砸壳检测"><a href="#砸壳检测" class="headerlink" title="砸壳检测"></a>砸壳检测</h1><p>查看ipa是否已脱壳成功：otool -l +二进制文件路径| grep crypt<br>Cryptid 0表示已经脱壳成功</p><h1 id="IPA二进制文件分析"><a href="#IPA二进制文件分析" class="headerlink" title="IPA二进制文件分析"></a>IPA二进制文件分析</h1><h2 id="分析工具"><a href="#分析工具" class="headerlink" title="分析工具"></a>分析工具</h2><h3 id="class-dump"><a href="#class-dump" class="headerlink" title="class-dump"></a>class-dump</h3><p>class-dump:导出头文件，下载地址:<a href="http://stevenygard.com/projects/class-dump/" target="_blank" rel="noopener">http://stevenygard.com/projects/class-dump/</a><br>执行命令：class-dump -H + 可执行文件路径 -o + 输入头文件目录<br>执行完成之后，头文件就会dump出来，我们可以根据头文件的属性方法信息分析文件结构</p><h3 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h3><p>IDA：静态调试工具<br>将脱壳之后的二进制文件拖入到IDA之后，会解析出[类名+方法名],结合class-dump导出的头文件可以在IDA里面搜索对应的方法，双击方法名，进入右侧汇编窗口，F5之后可以看方法类的伪代码，进行代码分析</p><h3 id="LLDB"><a href="#LLDB" class="headerlink" title="LLDB"></a>LLDB</h3><h4 id="LLDB调试步骤"><a href="#LLDB调试步骤" class="headerlink" title="LLDB调试步骤"></a>LLDB调试步骤</h4><p>1.LLDB:动态调试工具（Xcode自带调试工具）<br>restore-symbol:符号表恢复工具，下载地址:<a href="https://github.com/tobefuturer/restore-symbol" target="_blank" rel="noopener">https://github.com/tobefuturer/restore-symbol</a><br>下载完成后进入restore-symbol目录，执行make生成restore-symbol可执行文件</p><p>2.符号表导出：<br>–&gt;restore-symbol + 砸壳之后的二进制文件 -o + 目的文件路径<br>将生成的恢复符号表之后的二进制文件替换掉砸壳之后ipa包，重新签名之后，安装到越狱手机，可以开始执行动态调试了</p><p>3.SSH到越狱手机，将debugserver文件拷贝到Mac上，执行命令：<br>–&gt;scp <a href="mailto:root@xx.xx.xx.xx" target="_blank" rel="noopener">root@xx.xx.xx.xx</a>:/Developer/usr/bin/debugserver /Mac路径</p><p>4.对debugserver签名授权：为了能调试非Xcode安装的第三方应用，需要给debugserver增加权限，需要准备entitlements.plist文件，文件内容如下：<br>&lt;?xml version=”1.0” encoding=”UTF-8”?&gt;<br>&lt;!DOCTYPE plist PUBLIC “-//Apple//DTD PLIST 1.0//EN” “<a href="http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;" target="_blank" rel="noopener">http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;</a></p><p><plist version="1.0"></plist></p><p><dict></dict></p><p><key>com.apple.springboard.debugapplications</key> <ture></ture></p><p><key>run-unsigned-code</key> </p><p><ture></ture></p><p><key>get-task-allow</key> </p><p><ture></ture></p><p><key>task_for_pid-allow</key></p><p><ture><br><br>，<br>创建好entitlements.plist之后，开始对debugserver签名，执行命令：<br>–&gt;codesign -s - –entitlements entitlements.plist -f debugserver</ture></p><p>5将重签之后的debugserver拷贝回到越狱手机，执行命令：<br>–&gt;scp debugserver <a href="mailto:root@xx.xx.xx.xx" target="_blank" rel="noopener">root@xx.xx.xx.xx</a>:/usr/bin/debugserver</p><p>6.SSH到越狱手机，执行命令：<br>–&gt;debugserver *:1234 -a AppName<br>另起一个终端窗口，执行命令:<br>–&gt;lldb<br>–&gt;process connect connect://xx.xx.xx.xx:1234<br>之后对应的应用就被断住，执行命令：<br>–&gt;c<br>放开断点，往下继续走</p><p>7.给app下断点，参考class-dump导出的头文件，给对应的方法下断点<br>执行命令：<br>–&gt;breakpoint set -n xxx：方法名：如果app中对应的点击事件和猜测的方法名匹配，断点就会断住<br>删除断点，执行命令：<br>–&gt;breakpoint delete xxx：断点id<br>–&gt;bt：打印堆栈信息</p><p>根据上面动态调试信息，我们就可以根据具体需求，编写动态库进行Hook操作了，编写完动态库之后，就可以进行代码注入重新签名操作</p>]]></content>
    
    <summary type="html">
    
      iOS 砸壳ipa分析相关，记录一下
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://denmanboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>北漂有感</title>
    <link href="http://denmanboy.github.io/2019/01/16/%E5%8C%97%E6%BC%82%E6%9C%89%E6%84%9F/"/>
    <id>http://denmanboy.github.io/2019/01/16/北漂有感/</id>
    <published>2019-01-16T08:16:16.000Z</published>
    <updated>2019-01-19T06:18:16.494Z</updated>
    
    <content type="html"><![CDATA[<p><script><br>(function(){<br>    var bp = document.createElement(‘script’);<br>    var curProtocol = window.location.protocol.split(‘:’)[0];<br>    if (curProtocol === ‘https’) {<br>        bp.src = ‘<a href="https://zz.bdstatic.com/linksubmit/push.js&#39;">https://zz.bdstatic.com/linksubmit/push.js&#39;</a>;<br>    }<br>    else {<br>        bp.src = ‘<a href="http://push.zhanzhang.baidu.com/push.js&#39;">http://push.zhanzhang.baidu.com/push.js&#39;</a>;<br>    }<br>    var s = document.getElementsByTagName(“script”)[0];<br>    s.parentNode.insertBefore(bp, s);<br>})();<br></script></p><p><link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">  </p><p><script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script>  </p><p><script>hljs.initHighlightingOnLoad();</script></p><div align="center"><br><br>癸巳之年入京城，<br>斗转星移几度秋。<br>闲来偶忆北漂初，<br>燕去家山万里余。<br>秋高扶栏叹漂泊，<br>切把苍凉化酒融。<br>何处相思残阳里，<br>几多感悟路尘中。<br>鬓飞故土千山雪，<br>血染鲁南万水红。<br>笑我五年仍俗态，<br>庸诗半卷手空空。<br>醉卧蜗居思飞绪，<br>古来留京能几人。<br><br><img src="/images/8D4FE5E4-2E42-4252-96A7-3FD3D0289ED2.jpg" alt=""><br></div>]]></content>
    
    <summary type="html">
    
      时间如白驹过隙一般，悄然逝去，不知不觉来北京已多年
    
    </summary>
    
      <category term="life" scheme="http://denmanboy.github.io/categories/life/"/>
    
    
      <category term="诗词" scheme="http://denmanboy.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>多线程并行之美</title>
    <link href="http://denmanboy.github.io/2019/01/15/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%B9%B6%E8%A1%8C%E4%B9%8B%E7%BE%8E/"/>
    <id>http://denmanboy.github.io/2019/01/15/多线程并行之美/</id>
    <published>2019-01-15T11:47:33.000Z</published>
    <updated>2019-01-19T06:18:16.495Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script><link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">  <script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script>  <script>hljs.initHighlightingOnLoad();</script><h1 id="线程基础"><a href="#线程基础" class="headerlink" title="线程基础"></a>线程基础</h1><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><p>进程是计算机操作系统中任务调度的基本单位，他拥有自己独立的地址空间和系统资源，并不与其它进程共享。<br>线程是依赖于进程存在的计算机最小调度单位，他们共享进程的地址空间和系统资源，单个进程的线程之间会通过共享资源进行交互<br>每一个进程至少有一个线程，即主线程，和0到多个工作线程<br><img src="/images/15476394562464.jpg" alt=""></p><h2 id="只有一个收银队列"><a href="#只有一个收银队列" class="headerlink" title="只有一个收银队列"></a>只有一个收银队列</h2><p>•我们从超市收银开始说起<br>•最初的时候，我们的超市只有一个收银通道和一个收银员<br>•每个顾客在这收银通道排队，他们需要清点自己购买的商品并计算价钱，然后付费<br><img src="/images/15476396146660.jpg" alt=""></p><h2 id="多个收银队列一个收银员"><a href="#多个收银队列一个收银员" class="headerlink" title="多个收银队列一个收银员"></a>多个收银队列一个收银员</h2><p>•由于每个顾客清点自己购买的物品都需要一定的时间，后面的顾客就不耐烦了，他们想超市老板投诉说结账太慢了，能不能快一点<br>•超市老板灵机一动，没问题，我给你们再开辟两条结账通道出来。不过为了成本考虑，我还是只雇用一个收银员吧。<br>•于是这一个收银员开始辛苦的在每一个通道里分别给排队的用户结账。结账的速度看起来好像快了<br>•实际上每个用户由于要和收银员核对物品，加上收银员需要在各个队伍之前来回穿梭，客户等待的时间更长了。<br>•客户再次向老板投诉<br><img src="/images/15476416181015.jpg" alt=""></p><h2 id="多个收银队列多个收银员"><a href="#多个收银队列多个收银员" class="headerlink" title="多个收银队列多个收银员"></a>多个收银队列多个收银员</h2><p>•老板想了想，还是再多雇两个收银员吧<br>•这下结账速度真的快了起来<br>•老板开始高兴地躺在那里数钱了<br><img src="/images/15476400168177.jpg" alt=""></p><h2 id="新的问题来了"><a href="#新的问题来了" class="headerlink" title="新的问题来了"></a>新的问题来了</h2><p>•老板突然想知道每天的实时营业额<br>•聪明的老板说，你们每个收银员收完一笔钱，都在那个黑板上给我记一下最新的汇总数<br>•刚开始这个数更新的很好<br>•突然老板发现这个数从一个大数变成了一个小一点的数。<br>•这是怎么回事？这是绝不能容忍的事情<br><img src="/images/15476406193551.jpg" alt=""><br>•原来收银员A和收银员B同时收了一笔款，他们分别根据之前的汇总数计算除了自己的汇总数<br>•收银员A更新了自己的汇总数<br>•收银员B然后也更新了自己的汇总数<br>•于是收银员A的交易记录没有被正确的统计了<br>•这可怎么办呢？</p><h2 id="这个问题难不倒我"><a href="#这个问题难不倒我" class="headerlink" title="这个问题难不倒我"></a>这个问题难不倒我</h2><p>•聪明的超市老板怎么会被这个问题难住呢？<br>•老板做出了规定，每个人准备去更新自己的数据的时候，一定要先把黑板挡起来不让别人看见，自己更新完了才能把黑板显示出来<br>•完美解决<br><img src="/images/15476406774096.jpg" alt=""></p><h1 id="线程的进化"><a href="#线程的进化" class="headerlink" title="线程的进化"></a>线程的进化</h1><h2 id="单任务时代"><a href="#单任务时代" class="headerlink" title="单任务时代"></a>单任务时代</h2><p>•在最初的操作系统中，计算机一次只能执行一个任务，当这个任务结束后才能够执行下一个任务<br>•由于不同的任务需要处理逻辑的差异导致任务处理过程中需要的计算机系统资源注定不会是相同的<br>•这就意味着，执行一个任务的时候，总有一些资源是处于闲置状态的。那些伟大的计算机科学家怎么能够容忍宝贵的计算资源被浪费呢？<br>•于是单任务时代结束了<br>•计算机科学家们决定进化到多任务时代</p><h2 id="多任务时代"><a href="#多任务时代" class="headerlink" title="多任务时代"></a>多任务时代</h2><p>•计算机科学家们将计算机进化到了多任务时代，他们终于可以一边听着CD，一边写代码了，啊，不，是计算机终于可以同时执行多个任务了<br>•当然，这个多个任务还不是真正的同时执行多个任务了。这其实就是一次执行一个任务很小一段时间，然后又执行另外一个任务很小一段时间，多个任务轮流获得执行的时间来真正完成。于是当这个执行时间对于用户感知度不明显的时候，用户就感觉这些任务真的是在同时运行了。<br>•这个执行时间后来就叫做CPU执行时间片，现代操作系统的基本实现大都是基于这个原理的</p><h2 id="单线程时代"><a href="#单线程时代" class="headerlink" title="单线程时代"></a>单线程时代</h2><p>•在最初的多任务操作系统中，每一个任务里的子任务都会像超市收银队列那样一个个的排着队等待处理<br>•伟大（ai zhe teng）的科学家们想着既然能够让多任务可以使用CPU时间片执行原则，为什么不可以让任务也享受这一个原则呢？<br><img src="/images/15476407841987.jpg" alt=""></p><h2 id="多线程时代"><a href="#多线程时代" class="headerlink" title="多线程时代"></a>多线程时代</h2><p>•说干就干，计算机科学家们将计算机体系正式升级到了多任务多线程时代<br>•单个任务也可以根据需要告诉系统安排分配给自己的CPU时间片区执行自己多个的线程<br>•但是，请注意一点，系统是一个很懒很懒的家伙，它可能不会按照你想象的执行顺序去执行你的线程。就如同右边的收银员可能总是按照固定的顺序在三个队列之间来回跑动而不是总是出现在需要的那个队列<br>•当然，我们可以通过调整优先级告诉系统需要优先执行哪个队列。就比如旁边有一个收银队列的顾客准备好了之后就会呼叫收银员，因此收银员就可以把它作为下一个收银队列跑过去一样<br><img src="/images/15476408497417.jpg" alt=""></p><h2 id="多核多线程时代"><a href="#多核多线程时代" class="headerlink" title="多核多线程时代"></a>多核多线程时代</h2><p>•计算机科学家们通过拳打脚踢让硬件科学家们搞出了多核CPU<br>•终极进化——真·并行处理计算机体系出现啦，大家鼓掌<br>•可是，好像好多的问题啊<br><img src="/images/15476408953523.jpg" alt=""></p><h1 id="线程的调度"><a href="#线程的调度" class="headerlink" title="线程的调度"></a>线程的调度</h1><h2 id="线程调度问题"><a href="#线程调度问题" class="headerlink" title="线程调度问题"></a>线程调度问题</h2><p>•实际上，我们任务中的线程不太可能总是自己干自己的事，他们总可能有各种各样的联系<br>•比如两个线程之间有明确依赖关系<br>•又比如就像右边的多个收银员需要去更新同一个统计数一样，多个线程由于共享资源，他们总是可能需要同时访问相同的资源<br>•又由于现成干的事情不一样可能会导致及时后进入等待处理队列的线程需要被优先执行<br>•线程调度就是负责处理这些让人头疼的事情的。有了它，程序员们就可以不用像计算机科学家那样去考虑我的时间片怎么用了，只要你按照规则，系统帮你处理。哗，终于可以跟隔壁的小花聊个天了<br>•慢着，少年，too young too simple，规则你都知道么？<br><img src="/images/15476409354320.jpg" alt=""></p><h2 id="线程调度之优先级"><a href="#线程调度之优先级" class="headerlink" title="线程调度之优先级"></a>线程调度之优先级</h2><p>•做系统的那个科学家估计当初很懒，他就喜欢顺序执行处于等待队列的线程<br>•可是总有些事情是需要优先处理的呀，肿么破？比如右边的顾客队列3已经准备好了，顾客队列2还在准备中，应该优先处理顾客队列3吧<br>•这个好办，给他们分个等级，都排到一个队伍里，等级高在前面按时间先后排队，等级低的在后面，搞掂。额，我好困，再见<br><img src="/images/15476411847153.jpg" alt=""></p><h2 id="线程调度之同步"><a href="#线程调度之同步" class="headerlink" title="线程调度之同步"></a>线程调度之同步</h2><p>•刚才的事实告诉我们，系统是靠不住的，科学家也不是都靠得住的，还是要靠我们自力更生的<br>•于是他们又搞出来同步机制，能够让我们更好的自己安排我们的线程执行顺序</p><h2 id="线程调度之等待和事件"><a href="#线程调度之等待和事件" class="headerlink" title="线程调度之等待和事件"></a>线程调度之等待和事件</h2><p>•当我们的某个线程需要的条件不满足的时候，它就告诉系统说，等XX事件触发的时候你叫醒我，我先睡会<br>•系统记录下这个线程的要求，在XX事件没有触发之前都不会分配时间片给它<br>•XX事件触发了，系统优先唤醒这个线程并分配时间片给它让它继续处理<br>•线程可以因为等待事件的触发或锁资源的释放进入等待状态，处于等待状态的时候，系统不会分配对应的时间片资源给它，除非它能够等待到它想要的资源<br>•于是我们的线程总算可以愉快的休息和工作了，啊，生活真美好啊<br><img src="/images/15476412642385.jpg" alt=""></p><h2 id="线程同步之互斥和锁"><a href="#线程同步之互斥和锁" class="headerlink" title="线程同步之互斥和锁"></a>线程同步之互斥和锁</h2><p>•我们的线程总是有个性的，有些时候，它在处理某个东西的时候不喜欢别人插一腿，咋办？<br>•把它锁起来吧，少年，锁起来这段时间它就是你一个人的。别忘了用完了解开锁哦<br>•锁就是允许你执行排他性操作时用的东东，你加上锁后，请求相同锁的其他线程就处于等待状态，得等锁释放了才能继续依次执行。线程的随机串行化执行也是用锁的哦<br>•不过，少年，用锁的时候别太嗨，小心死锁哦<br><img src="/images/15476413182536.jpg" alt=""></p><h2 id="线程同步之信号量"><a href="#线程同步之信号量" class="headerlink" title="线程同步之信号量"></a>线程同步之信号量</h2><p>•锁只能控制一个一个的执行，我想告诉系统可以同时执行最多N个线程行不行？<br>•行，为了你这么有想法的少年，我们现在向你隆重介绍信号量这个玩意，它可以允许你同时执行多个线程去访问某个资源<br>•信号量每使用一个信号，就会减去一个可用数；每释放一个信号，就会加上一个可用数。当可用数为0的时候，请求信号的线程就会像请求锁的线程那样处于等待状态，直到有人释放一个信号，才会继续执行</p>]]></content>
    
    <summary type="html">
    
      线程的认知，痛并快乐着
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="线程" scheme="http://denmanboy.github.io/tags/%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>初冬游景山</title>
    <link href="http://denmanboy.github.io/2018/11/24/%E5%88%9D%E5%86%AC%E6%B8%B8%E6%99%AF%E5%B1%B1/"/>
    <id>http://denmanboy.github.io/2018/11/24/初冬游景山/</id>
    <published>2018-11-24T08:36:27.000Z</published>
    <updated>2019-01-16T15:48:20.648Z</updated>
    
    <content type="html"><![CDATA[<p><script><br>(function(){<br>    var bp = document.createElement(‘script’);<br>    var curProtocol = window.location.protocol.split(‘:’)[0];<br>    if (curProtocol === ‘https’) {<br>        bp.src = ‘<a href="https://zz.bdstatic.com/linksubmit/push.js&#39;">https://zz.bdstatic.com/linksubmit/push.js&#39;</a>;<br>    }<br>    else {<br>        bp.src = ‘<a href="http://push.zhanzhang.baidu.com/push.js&#39;">http://push.zhanzhang.baidu.com/push.js&#39;</a>;<br>    }<br>    var s = document.getElementsByTagName(“script”)[0];<br>    s.parentNode.insertBefore(bp, s);<br>})();<br></script></p><p><link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">  </p><p><script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script>  </p><p><script>hljs.initHighlightingOnLoad();</script></p><div align="center"><br><br>时维葭月初三日，<br>序属初冬微寒时。<br>借问景山何处寻，<br>京城二环故宫北。<br>景山赏景景清明，<br>眼底纵横爱晚晴。<br>五亭有幸峰巅立，<br>一树无辜做帝茔。<br>可叹历史本如此，<br>稳中不变有深渊。<br><br><img src="/images/2018jingshan1.jpg" alt=""><img src="/images/2018jingshan1.jpg" alt=""><br><img src="/images/2018jingshan3.jpg" alt=""><img src="/images/2018jingshan4.jpg" alt=""><br><br></div>]]></content>
    
    <summary type="html">
    
      周末百无聊赖之际，偶游景山
    
    </summary>
    
      <category term="life" scheme="http://denmanboy.github.io/categories/life/"/>
    
    
      <category term="诗词" scheme="http://denmanboy.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>情致山水·草原天路</title>
    <link href="http://denmanboy.github.io/2018/08/11/%E5%BC%A0%E5%8C%97%E8%8D%89%E5%8E%9F/"/>
    <id>http://denmanboy.github.io/2018/08/11/张北草原/</id>
    <published>2018-08-11T12:39:01.000Z</published>
    <updated>2019-01-16T15:48:20.649Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script><link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">  <script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script>  <script>hljs.initHighlightingOnLoad();</script><div align="center"><br><br><img src="/images/6EC38032-C743-4E01-90AE-0B55C5A65CA4.jpg" alt=""><img src="/images/A7C6948A-2272-4C92-BFBE-E5C0E538FE9B.jpg" alt=""><br><br>百里风光百里画,一折山水一折诗<br>小草开始泛绿,野花含羞点额<br>纵是野客浪子,也不敢践踏了这高贵与清纯<br>于是<br>只能静思高阁<br>膜拜于这份芳华的烂漫,<br>沉浸一份娴静的诗意<br><br>是言<br>绵延张北尽是原，茫无涯际草接天。<br>天宽地阔有时尽，此青绵绵无绝期。<br><br><br><img src="/images/C9B5FE9F-85D9-4016-953D-82AC20A6DD69.jpg" alt=""><img src="/images/99F93590-8B78-4813-9EDA-763E9E568793.jpg" alt=""><br><img src="/images/6934ED36-3785-412F-A4FD-A789B691CED7.jpg" alt=""><img src="/images/60962775-71C0-4D83-97EE-0CA51E2077CD.jpg" alt=""><br><br></div>]]></content>
    
    <summary type="html">
    
      张北草原团建
    
    </summary>
    
      <category term="life" scheme="http://denmanboy.github.io/categories/life/"/>
    
    
      <category term="诗词" scheme="http://denmanboy.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>2018初夏</title>
    <link href="http://denmanboy.github.io/2018/05/29/2018%E5%88%9D%E5%A4%8F/"/>
    <id>http://denmanboy.github.io/2018/05/29/2018初夏/</id>
    <published>2018-05-29T00:44:05.000Z</published>
    <updated>2019-01-16T15:48:20.648Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script><link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">  <script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script>  <script>hljs.initHighlightingOnLoad();</script><div align="center"><br><br>树阴满地日初午，<br>闻觉黄莺时时鸣。<br>春芳歇去何须恨，<br>夏木阴阴正可人。<br><img src="/images/2018chuxia.jpg" alt="2018chuxia"><br><br></div>]]></content>
    
    <summary type="html">
    
      又是一年初夏日，几多阳光，几多时。
    
    </summary>
    
      <category term="life" scheme="http://denmanboy.github.io/categories/life/"/>
    
    
      <category term="诗词" scheme="http://denmanboy.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>MacOS_Service_Deamon开发</title>
    <link href="http://denmanboy.github.io/2018/05/24/MacOS-Service%E5%BC%80%E5%8F%91/"/>
    <id>http://denmanboy.github.io/2018/05/24/MacOS-Service开发/</id>
    <published>2018-05-24T03:41:46.000Z</published>
    <updated>2019-01-15T15:31:22.157Z</updated>
    
    <content type="html"><![CDATA[<p><script><br>(function(){<br>    var bp = document.createElement(‘script’);<br>    var curProtocol = window.location.protocol.split(‘:’)[0];<br>    if (curProtocol === ‘https’) {<br>        bp.src = ‘<a href="https://zz.bdstatic.com/linksubmit/push.js&#39;">https://zz.bdstatic.com/linksubmit/push.js&#39;</a>;<br>    }<br>    else {<br>        bp.src = ‘<a href="http://push.zhanzhang.baidu.com/push.js&#39;">http://push.zhanzhang.baidu.com/push.js&#39;</a>;<br>    }<br>    var s = document.getElementsByTagName(“script”)[0];<br>    s.parentNode.insertBefore(bp, s);<br>})();<br></script></p><h1 id="Service简介"><a href="#Service简介" class="headerlink" title="Service简介"></a>Service简介</h1><h1 id="为什么要用Service"><a href="#为什么要用Service" class="headerlink" title="为什么要用Service"></a>为什么要用Service</h1><h1 id="Apple-Service分类"><a href="#Apple-Service分类" class="headerlink" title="Apple Service分类"></a>Apple Service分类</h1>]]></content>
    
    <summary type="html">
    
      高权限操作放到Serview中，UI程序通过XPCConnect 通讯
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="Mac service" scheme="http://denmanboy.github.io/tags/Mac-service/"/>
    
  </entry>
  
  <entry>
    <title>关于block的那些事</title>
    <link href="http://denmanboy.github.io/2018/05/22/%E5%85%B3%E4%BA%8Eblock%E7%9A%84%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://denmanboy.github.io/2018/05/22/关于block的那些事/</id>
    <published>2018-05-22T03:32:19.000Z</published>
    <updated>2019-01-15T15:31:22.162Z</updated>
    
    <content type="html"><![CDATA[<p><script><br>(function(){<br>    var bp = document.createElement(‘script’);<br>    var curProtocol = window.location.protocol.split(‘:’)[0];<br>    if (curProtocol === ‘https’) {<br>        bp.src = ‘<a href="https://zz.bdstatic.com/linksubmit/push.js&#39;">https://zz.bdstatic.com/linksubmit/push.js&#39;</a>;<br>    }<br>    else {<br>        bp.src = ‘<a href="http://push.zhanzhang.baidu.com/push.js&#39;">http://push.zhanzhang.baidu.com/push.js&#39;</a>;<br>    }<br>    var s = document.getElementsByTagName(“script”)[0];<br>    s.parentNode.insertBefore(bp, s);<br>})();<br></script></p><h1 id="block是Objective-c中对闭包的实现"><a href="#block是Objective-c中对闭包的实现" class="headerlink" title="block是Objective-c中对闭包的实现"></a>block是Objective-c中对闭包的实现</h1><h2 id="1-什么是闭包"><a href="#1-什么是闭包" class="headerlink" title="1.什么是闭包"></a>1.什么是闭包</h2><p>计算机语言中，闭包（closure）是有函数和与其相关的引用环境组合而成的实体；<br>闭包就是能够读取其他函数内部变量的函数。<br>block就是Objective-c对闭包的实现，block是iOS4.0+和Mac OSX 10.6+引进的对C语言的扩展。</p><h2 id="2-闭包的理解"><a href="#2-闭包的理解" class="headerlink" title="2. 闭包的理解"></a>2. 闭包的理解</h2><p>将函数、函数指针、闭包三者对比起来理解，能加深对闭包的理解。<br>函数：具有特定功能的代码块。<br>函数指针：指向函数的指针。<br>闭包：除具备函数和函数指针的所有功能外，还包括声明它的上下文（如作用域和自由变量等）。</p><h2 id="3-block和函数指针的关系"><a href="#3-block和函数指针的关系" class="headerlink" title="3.block和函数指针的关系"></a>3.block和函数指针的关系</h2><p>block的使用很像函数指针，不过与函数指针最大的不同是Block可以访问函数以外的外部变量的值，换句话说，Block不仅实现函数的功能，还能携带函数的执行环境。<br>函数指针：void (*fun)(int) //指向参数为int类型返回值为void类型的函数<br>Block：void (\^fun)(int)</p><h1 id="block的分类及区分方法"><a href="#block的分类及区分方法" class="headerlink" title="block的分类及区分方法"></a>block的分类及区分方法</h1><h2 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h2><p>在Objective-C语言中，一共有3种类型的block<br>1._NSConcreteGlobalBlock 保存全局的block，不会访问任何外部变量。相当于全部变量，系统会自动释放。<br>2._NSConcreteStackBlock 保存在栈中的block，当函数返回时会被销毁。相等于局部变量，系统会自动释放.<br>3._NSConcreteMallocBlock 保存在堆中的block，当引用计数为0时会被销毁。需要手动释放</p><h2 id="区分方法"><a href="#区分方法" class="headerlink" title="区分方法"></a>区分方法</h2><p>如果block实现中没有访问任何“外部”变量（包括局部和全局），该block为GlobalBlock；<br>如果block 实现中访问了任何“外部”（包括局部和全局），该block 为StackBlock；<br>对StackBlock 进行拷贝（copy/Block_copy），该block为MallocBlock；</p><h1 id="block的本质"><a href="#block的本质" class="headerlink" title="block的本质"></a>block的本质</h1><p>block实际上是指向结构体的指针，编译器会将block的内部代码生成对应的函数。<br><a href="https://www.cnblogs.com/yoon/p/4953618.html" target="_blank" rel="noopener">block的实现原理</a></p><h1 id="block的一些疑问"><a href="#block的一些疑问" class="headerlink" title="block的一些疑问"></a>block的一些疑问</h1><h2 id="1-block为什么要用copy"><a href="#1-block为什么要用copy" class="headerlink" title="1.block为什么要用copy"></a>1.block为什么要用copy</h2><p>block 在创建的时候默认分配的内存实在栈上，而不是堆上,这样的话其本身的作用域属于创建时候的作用域，一旦在创建的作用域之外调用就会导致程序崩溃，所以使用了copy将其拷贝到堆内存上。</p><h2 id="2-栈上的block为什么不用retain"><a href="#2-栈上的block为什么不用retain" class="headerlink" title="2.栈上的block为什么不用retain"></a>2.栈上的block为什么不用retain</h2><p>retain 只是增加了一次引用计数，Block的内存还是在栈上，并没有存在堆上，存在栈上的block 可能随时被系统回收。</p><h2 id="3-为什么进入Block-的对象引用计数要加1"><a href="#3-为什么进入Block-的对象引用计数要加1" class="headerlink" title="3.为什么进入Block 的对象引用计数要加1"></a>3.为什么进入Block 的对象引用计数要加1</h2><p>block 一般执行的是回调，因此block并不知道其中的对象obj创建后会在什么时候释放，为了不在block使用obj之前，对象已经释放，block就retain了obj一次。</p><h1 id="block中的继承关系"><a href="#block中的继承关系" class="headerlink" title="block中的继承关系"></a>block中的继承关系</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">void</span>(^block1)(<span class="keyword">void</span>) = ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"这是全局block"</span>);</span><br><span class="line">&#125;;</span><br><span class="line">block1();</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"全局block parentClassHierarchy = %@"</span>,[[block1 <span class="keyword">class</span>] parentClassHierarchy]);</span><br><span class="line">block1 = [block1 <span class="keyword">copy</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"全局block copy parentClassHierarchy = %@"</span>,[[block1 <span class="keyword">class</span>] parentClassHierarchy]);</span><br><span class="line"><span class="keyword">void</span>(^block2)(<span class="keyword">void</span>) = ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">    <span class="built_in">NSLog</span>(<span class="string">@"a = %d 这是栈block"</span>,a);</span><br><span class="line">&#125;;</span><br><span class="line">block2();</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"栈 block parentClassHierarchy = %@"</span>,[[block2 <span class="keyword">class</span>] parentClassHierarchy]);</span><br><span class="line">block2 =  [block2 <span class="keyword">copy</span>];</span><br><span class="line"><span class="built_in">NSLog</span>(<span class="string">@"堆 block parentClassHierarchy = %@"</span>,[[block2 <span class="keyword">class</span>] parentClassHierarchy]);</span><br></pre></td></tr></table></figure><h2 id="MRC打印结果"><a href="#MRC打印结果" class="headerlink" title="MRC打印结果"></a>MRC打印结果</h2><p><img src="/images/MRCBlock_ParentClassHierarchy.png" alt="MRC打印结果"></p><h2 id="ARC打印结果"><a href="#ARC打印结果" class="headerlink" title="ARC打印结果"></a>ARC打印结果</h2><p><img src="/images/ARCBlock_ParentClassHierarchy.png" alt="ARC打印结果"><br>通过上面的对比，我们可以看出ARC的函数体内栈block自动copy到堆上</p><h1 id="block-的循环引用"><a href="#block-的循环引用" class="headerlink" title="block 的循环引用"></a>block 的循环引用</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">    <span class="class"><span class="keyword">@interface</span> <span class="title">ViewController</span> ()</span></span><br><span class="line">    <span class="keyword">@property</span>(<span class="keyword">nonatomic</span>,<span class="keyword">copy</span>)<span class="keyword">void</span>(^myBlock)(<span class="keyword">void</span>);</span><br><span class="line">    <span class="keyword">@end</span></span><br><span class="line">    <span class="comment">// 循环引用 self -&gt; block -&gt; self;</span></span><br><span class="line">    __<span class="keyword">weak</span> <span class="keyword">typeof</span>(<span class="keyword">self</span>) weakSelf = <span class="keyword">self</span>;</span><br><span class="line">    <span class="keyword">self</span>.myBlock = ^(<span class="keyword">void</span>)&#123;</span><br><span class="line">        __<span class="keyword">strong</span> <span class="keyword">typeof</span>(weakSelf) strongSelf  = weakSelf;</span><br><span class="line">        <span class="keyword">if</span> (strongSelf) &#123;</span><br><span class="line">            <span class="built_in">NSLog</span>(<span class="string">@"strongSelf = %@"</span>,strongSelf);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// animations 是栈block</span></span><br><span class="line">    [<span class="built_in">UIView</span> animateWithDuration:<span class="number">0.3</span> animations:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>,<span class="keyword">self</span>);</span><br><span class="line">    &#125;];</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 实例方法-</span></span><br><span class="line">    [<span class="keyword">self</span> someThingsCompletion:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>,<span class="keyword">self</span>);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 单利 </span></span><br><span class="line">    [[Single shareInstance] somethingCompletion:^&#123;</span><br><span class="line">        <span class="built_in">NSLog</span>(<span class="string">@"self = %@"</span>,<span class="keyword">self</span>);</span><br><span class="line">    &#125;];</span><br><span class="line"></span><br><span class="line">- (<span class="keyword">void</span>)someThingsCompletion:(<span class="keyword">void</span>(^)(<span class="keyword">void</span>))completion</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// block 判空 回调 completion 栈block</span></span><br><span class="line">    !completion ?: completion(); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/breakBlock.png" alt="breakBlock.png"><br><img src="/images/functionBlock.png" alt="breakBlock.png"></p><p>从上面我们可以看出block是函数参数时，就是栈block。</p><h1 id="block使用技巧"><a href="#block使用技巧" class="headerlink" title="block使用技巧"></a>block使用技巧</h1><h2 id="block为空判断"><a href="#block为空判断" class="headerlink" title="block为空判断"></a>block为空判断</h2><p>大家知道block若是为空，直接调用就会造成crash。<br>一般我们会用if语句判断一下,再调用.</p><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!block)&#123;</span><br><span class="line">    block();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样还得起if语句，其实我们可以用条件表达式直接判断，调用<br><code>!block ?: block();</code> 就可以</p><h2 id="block多参数"><a href="#block多参数" class="headerlink" title="block多参数"></a>block多参数</h2><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">-  (<span class="keyword">void</span>)blockTest</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">void</span>(^block1)(<span class="keyword">void</span>);</span><br><span class="line">    <span class="keyword">void</span>(^block2)(<span class="keyword">int</span> a);</span><br><span class="line">    <span class="keyword">void</span>(^block3)(<span class="built_in">NSNumber</span> *a, <span class="built_in">NSString</span> *b);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果block的参数列表为空的话，相当于可变参数（不是void）</span></span><br><span class="line">    <span class="keyword">void</span>(^block)(); <span class="comment">// 返回值为void，参数可变的block</span></span><br><span class="line">    block = block1; <span class="comment">// 正常</span></span><br><span class="line">    block = block2; <span class="comment">// 正常</span></span><br><span class="line">    block = block3; <span class="comment">// 正常</span></span><br><span class="line">    block(@<span class="number">1</span>, <span class="string">@"string"</span>);  <span class="comment">// 对应上面的block3</span></span><br><span class="line">    block(@<span class="number">1</span>); <span class="comment">// block3的第一个参数为@1，第二个为nil</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这样，block的主调和回调之间可以通过约定来决定block回传回来的参数是什么，有几个。如一个对网络层的调用：</span></span><br><span class="line">- (<span class="keyword">void</span>)requestDataWithApi:(<span class="built_in">NSInteger</span>)api block:(<span class="keyword">void</span>(^)())block <span class="comment">//</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (api == <span class="number">0</span>) &#123;</span><br><span class="line">        block(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span> (api == <span class="number">1</span>) &#123;</span><br><span class="line">        block(<span class="string">@"1"</span>, @<span class="number">2</span>, @[<span class="string">@"3"</span>, <span class="string">@"4"</span>, <span class="string">@"5"</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      block的分类，循环引用，使用技巧
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://denmanboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>为什么说Object-c是一门动态语言</title>
    <link href="http://denmanboy.github.io/2017/07/13/%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4Object-c%E6%98%AF%E4%B8%80%E9%97%A8%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80/"/>
    <id>http://denmanboy.github.io/2017/07/13/为什么说Object-c是一门动态语言/</id>
    <published>2017-07-13T02:37:41.000Z</published>
    <updated>2019-01-15T15:31:22.161Z</updated>
    
    <content type="html"><![CDATA[<p>① 什么是动态语言？<br>        动态语言，是指程序在运行时可以改变其结构：新的函数可以被引进，已有的函数可以被删除等在结构上的变化。比如众所周知的ECMAScript(JavaScript)便是一个动态语言。除此之外如Ruby、Python等也都属于动态语言，而C、C++等语言则不属于动态语言。<br>有三个名词容易混淆：<br>        Dynamic Programming Language (动态语言或动态编程语言)<br>        Dynamically Typed Language (动态类型语言)<br>        Statically Typed Language (静态类型语言)<br>所谓的动态类型语言，意思就是类型的检查是在运行时做的。</p><p>② 静态类型<br>        而静态类型语言的类型判断是在运行前判断（如编译阶段），比如C#、Java就是静态类型语言，静态类型语言为了达到多态会采取一些类型鉴别手段，如继承、接口，而动态类型语言却不需要，所以一般动态语言都会采用dynamic typing，常出现于脚本语言中.需要明确说明一点，那就是，是不是动态类型语言与这门语言是不是类型安全的完全不相干的，不要将它们联系在一起！<br>优缺点：<br>        静态类型语言的主要优点在于其结构非常规范，便于调试，方便类型安全；缺点是为此需要写更多的类型相关代码，导致不便于阅读、不清晰明了。动态类型语言的优点在于方便阅读，不需要写非常多的类型相关的代码；缺点自然就是不方便调试，命名不规范时会造成读不懂，不利于理解等。顺便说一下，现在有这样一种趋势，那就是合并动态类型与静态类型在一种语言中，这样可以在必要的时候取长补短，Boo就是一个很好的试验性例子。</p><p>③ Objective-C的动态运行性<br>        objective-c语言是C语言的一个子类，所以Objective-C是一个静态语言，但是Objective-C的三大特性之一的多态性让其拥有了动态性。<br>oc的动态性让程序可以在运行时判断其该有的行为，而不是像c等静态语言一样在编译构建时就确定下来。它的动态性主要体现在一下三个方面：</p><p>动态类型<br>        如id类型。实际上静态类型因为其固定性和可预知性而使用得更加广泛。静态类型是强类型，而动态类型属于弱类型。运行时决定接收者。<br>    这里补充讲一下强、弱类型：语言有无类型、强类型和弱类型三种。无类型的不做任何检查，甚至不区分指令和数据；弱类型的检查很弱，仅能区分指令和数据；强类型的严格在编译期进行检查。强类型语言在没有强制类型转化前，不允许两种不同类型的变量相互操作</p><p>动态绑定<br>        让代码在运行时判断需要调用什么方法，而不是在编译时。与其他面向对象语言一样，方法调用和代码并没有在编译时连接在一起，而是在消息发送时才进行连接。运行时决定调用哪个方法。</p><p>动态载入<br>        让程序在运行时添加代码模块以及其他资源。用户可以根据需要加载一些可执行代码和资源，而不是在启动时就加载所有组件。可执行代码中可以含有和程序运行时整合的新类。<br>对象是运行时类的一个实例。在类里声明了的实例变量和方法，它的每个实例都在内存中拥有同样的实例变量，以及指向那些方法的指针。在oc中对象永远是通过指针来引用的。</p>]]></content>
    
    <summary type="html">
    
      Objective-C是一门动态语言，与编译语言相比，优势在哪儿
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="Object-c" scheme="http://denmanboy.github.io/tags/Object-c/"/>
    
      <category term="动态语言" scheme="http://denmanboy.github.io/tags/%E5%8A%A8%E6%80%81%E8%AF%AD%E8%A8%80/"/>
    
  </entry>
  
  <entry>
    <title>那山，那水，那人</title>
    <link href="http://denmanboy.github.io/2016/06/28/%E9%82%A3%E5%B1%B1%EF%BC%8C%E9%82%A3%E6%B0%B4%EF%BC%8C%E9%82%A3%E4%BA%BA/"/>
    <id>http://denmanboy.github.io/2016/06/28/那山，那水，那人/</id>
    <published>2016-06-28T01:50:27.000Z</published>
    <updated>2019-01-15T15:31:22.165Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script>]]></content>
    
    <summary type="html">
    
      山还是那山，水还是那水，人还是那人
    
    </summary>
    
      <category term="life" scheme="http://denmanboy.github.io/categories/life/"/>
    
    
      <category term="诗词" scheme="http://denmanboy.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>关于产品的认知(仅抒己见)</title>
    <link href="http://denmanboy.github.io/2016/06/27/%E5%85%B3%E4%BA%8E%E4%BA%A7%E5%93%81%E7%9A%84%E8%AE%A4%E7%9F%A5(%E4%BB%85%E6%8A%92%E5%B7%B1%E8%A7%81)/"/>
    <id>http://denmanboy.github.io/2016/06/27/关于产品的认知(仅抒己见)/</id>
    <published>2016-06-27T05:54:37.000Z</published>
    <updated>2019-01-15T15:31:22.162Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script><h2 id="贴近用户，切入用户最直接的需求"><a href="#贴近用户，切入用户最直接的需求" class="headerlink" title="贴近用户，切入用户最直接的需求"></a>贴近用户，切入用户最直接的需求</h2><h2 id="简单直接-，减少用户学习成本"><a href="#简单直接-，减少用户学习成本" class="headerlink" title="简单直接 ，减少用户学习成本"></a>简单直接 ，减少用户学习成本</h2><h2 id="局部细化，细节处打动用户"><a href="#局部细化，细节处打动用户" class="headerlink" title="局部细化，细节处打动用户"></a>局部细化，细节处打动用户</h2><h2 id="统一风格，统一布局"><a href="#统一风格，统一布局" class="headerlink" title="统一风格，统一布局"></a>统一风格，统一布局</h2>]]></content>
    
    <summary type="html">
    
      昨天和清华毕业的大拿，聊了一会天，学的好多东西，特别是对产品，更是有了更深的了解，关于如何设计出一款让用户的喜爱的产品，仅抒己见，不爱请绕道。
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="产品" scheme="http://denmanboy.github.io/tags/%E4%BA%A7%E5%93%81/"/>
    
  </entry>
  
  <entry>
    <title>关于category不能添加实例变量</title>
    <link href="http://denmanboy.github.io/2016/06/23/%E5%85%B3%E4%BA%8Ecategory%E4%B8%8D%E8%83%BD%E6%B7%BB%E5%8A%A0%E5%AE%9E%E4%BE%8B%E5%8F%98%E9%87%8F/"/>
    <id>http://denmanboy.github.io/2016/06/23/关于category不能添加实例变量/</id>
    <published>2016-06-22T16:25:04.000Z</published>
    <updated>2019-01-15T15:31:22.162Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script><p><link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">  </p><p><script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script>  </p><p><script>hljs.initHighlightingOnLoad();</script></p><h1 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h1><h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>在编写面向对象的程序时，我们经常想为现有的类添加一些新的行为。例如，你设计了一种新的Car，因此需要创建Car类的子类并添加一些有趣的功能。为已经存在的类添加行为时，通常我们采用添加创建子类的方法。<br><br>不过有时子类并不方便。比方说，你想为<code>NSString</code>类添加一个新的行为，但是<code>NSString</code>实际是一个类簇的表面形式，因而为这样的类创建子类会非常困难。<br><br>利用Object-c的动态运行分配机制，我们可以为现有的类添加方法。这些方法就是Object-c中的<code>Category</code></p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><pre><code>struct objc_category {    //category名称    char *category_name                                          //添加category的类名称    char *class_name            //实例方法列表                                    struct objc_method_list *instance_methods                    //类方法列表    struct objc_method_list *class_methods                       //协议列表    struct objc_protocol_list *protocols                     }                                                            </code></pre><h2 id="Category的优势"><a href="#Category的优势" class="headerlink" title="Category的优势"></a>Category的优势</h2><ol><li>利用Category分散实现代码</li><li>通过Category创建前向应用</li></ol><h1 id="Extension"><a href="#Extension" class="headerlink" title="Extension"></a>Extension</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>Extension就是匿名Category，但是又有着很大的不同。</p><h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1><ol><li>Category可以写在单独一个文件内，也可以写在与之关联的类里面</li><li>Extension必须写在实现文件里  </li><li>Category声明的方法可以不实现.</li><li>Extension里声明的方法必须实现</li><li>Category不能添加实例变量</li><li>Extension可以添加实例变量</li><li>Category是运行时才会执行</li><li>Extension是编译时就会和关联的类一起编译</li></ol><h2 id="为什么Category不能添加实例变量而Extension可以"><a href="#为什么Category不能添加实例变量而Extension可以" class="headerlink" title="为什么Category不能添加实例变量而Extension可以"></a>为什么Category不能添加实例变量而Extension可以</h2><p>其实Category有两个局限性。第一个就是无法向类中添加实例变量，因为Category没有空间容纳实例变量。<br>第二个就是名称冲突，也就是Category中的方法与现有的方法重名。当发生冲突时，类别具有更高的优先级，我们的Category将完全取代初始化方法，导致初始化方法不再可用。<br><br>为什么Category没有空间容纳实例变量呢？<br><br>从上面Category说明中我们了解到Category运行时工作的，此时一个类的对象的内存已经布局好了，如果此时向一个类的对象添加实例变量就会扰乱内存布局。因此我们从Category的定义中看到没有容纳实例变量的变量，只有Category名称，类名称，实例方法列表，类方法列表，协议列表<br><br>而Extension为什么就可以呢？<br><br>通过上面的对比我们知道Extension是编译时就会和关联的类一起编译，因此可以。</p><h2 id="通过runtime向类关联对象"><a href="#通过runtime向类关联对象" class="headerlink" title="通过runtime向类关联对象"></a>通过runtime向类关联对象</h2><p>虽然Category不能添加实例变量，但是我们可以利用runtime中的关联对象（Associated Object）变相在运行时向一个对象加变量  </p>]]></content>
    
    <summary type="html">
    
      category 不能添加实例变量的原因
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://denmanboy.github.io/tags/iOS/"/>
    
      <category term="category" scheme="http://denmanboy.github.io/tags/category/"/>
    
  </entry>
  
  <entry>
    <title>delegate和block使用的场景</title>
    <link href="http://denmanboy.github.io/2016/06/22/delegate%E5%92%8Cblock%E4%BD%BF%E7%94%A8%E7%9A%84%E5%9C%BA%E6%99%AF/"/>
    <id>http://denmanboy.github.io/2016/06/22/delegate和block使用的场景/</id>
    <published>2016-06-22T11:24:51.000Z</published>
    <updated>2019-01-15T15:31:22.159Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script><p><link href="http://cdn.bootcss.com/highlight.js/8.0/styles/monokai_sublime.min.css" rel="stylesheet">  </p><script src="http://cdn.bootcss.com/highlight.js/8.0/highlight.min.js"></script>  <script>hljs.initHighlightingOnLoad();</script><p>比较这个两者的使用场景最好的方法就是看Apple-IOSSDK的使用，Apple的文档就是一本用来指导我们如何使用设计模式的指导书。<br>我们需要去研究一下Apple分别是在什么情况下使用delegate和block，如果我们发现了Apple做这种选择的套路，我们就可以构建出一些规则，可以帮助在我们在自己的代码中做相同选择。</p><h2 id="delegate举例"><a href="#delegate举例" class="headerlink" title="delegate举例"></a>delegate举例</h2><p>我们以最常用的tableView为例,看iOSSDK如何设计和使用delegate的   </p><h3 id="UITableViewDelegate"><a href="#UITableViewDelegate" class="headerlink" title="UITableViewDelegate"></a>UITableViewDelegate</h3><pre><code>@protocol UITableViewDelegate&lt;NSObject, UIScrollViewDelegate&gt;@optional - (void)tableView:(UITableView *)tableView willDisplayCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath *)indexPath;- (void)tableView:(UITableView *)tableView willDisplayHeaderView:(UIView *)view forSection:(NSInteger)section NS_AVAILABLE_IOS(6_0);- (void)tableView:(UITableView *)tableView willDisplayFooterView:(UIView *)view forSection:(NSInteger)section NS_AVAILABLE_IOS(6_0);- (void)tableView:(UITableView *)tableView didEndDisplayingCell:(UITableViewCell *)cell forRowAtIndexPath:(NSIndexPath*)indexPath NS_AVAILABLE_IOS(6_0);- (void)tableView:(UITableView *)tableView didEndDisplayingHeaderView:(UIView *)view forSection:(NSInteger)section NS_AVAILABLE_IOS(6_0);- (void)tableView:(UITableView *)tableView didEndDisplayingFooterView:(UIView *)view forSection:(NSInteger)section NS_AVAILABLE_IOS(6_0); @end  </code></pre><h3 id="UITableViewDataSource"><a href="#UITableViewDataSource" class="headerlink" title="UITableViewDataSource"></a>UITableViewDataSource</h3><pre><code>@protocol UITableViewDataSource&lt;NSObject&gt;@required- (NSInteger)tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section;// Row display. Implementers should *always* try to reuse cells by setting each cell&apos;s reuseIdentifier and querying for available reusable cells with dequeueReusableCellWithIdentifier:// Cell gets various attributes set automatically based on table (separators) and data source (accessory views, editing controls)- (UITableViewCell *)tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath;@optional- (NSInteger)numberOfSectionsInTableView:(UITableView *)tableView;              // Default is 1 if not implemented- (nullable NSString *)tableView:(UITableView *)tableView titleForHeaderInSection:(NSInteger)section;    // fixed font style. use custom view (UILabel) if you want something different- (nullable NSString *)tableView:(UITableView *)tableView titleForFooterInSection:(NSInteger)section;// Editing// Individual rows can opt out of having the -editing property set for them. If not implemented, all rows are assumed to be editable.- (BOOL)tableView:(UITableView *)tableView canEditRowAtIndexPath:(NSIndexPath *)indexPath;// Moving/reordering// Allows the reorder accessory view to optionally be shown for a particular row. By default, the reorder control will be shown only if the datasource implements -tableView:moveRowAtIndexPath:toIndexPath:- (BOOL)tableView:(UITableView *)tableView canMoveRowAtIndexPath:(NSIndexPath *)indexPath;@end</code></pre><h2 id="delegate分析"><a href="#delegate分析" class="headerlink" title="delegate分析"></a>delegate分析</h2><ul><li>大多数delegate  都会好几个数据源<br>从上面的tableViewDataSource 我们可以看到，一个tableView如何展示，需要询问代理，有几个section，每个section里面有几行，行高是多少。当然达到这样的需求，也可以为对应每一个事件注册相应的block，显然这种方式是不合理的</li><li>大多数delegate 都有多个回调，用来捕获对象的行为过程<br>特别是系统提供的一些控件来，都有很多delegate回调方法，用来捕获对象的一些行为动作过程，像<code>UITextField</code>,<code>UISearchBar</code>,这些控件的一些行为，通过delegate方法告诉delegate控件的一些行为状态。</li></ul><h1 id="Block举例"><a href="#Block举例" class="headerlink" title="Block举例"></a>Block举例</h1><figure class="highlight objc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">UIView</span> animateWithDuration:&lt;<span class="meta">#(NSTimeInterval)#&gt; animations:<span class="meta-string">&lt;#^(void)animations#&gt;</span>   </span></span><br><span class="line">completion:&lt;<span class="meta">#^(BOOL finished)completion#&gt;]           </span></span><br><span class="line"></span><br><span class="line">dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(&lt;<span class="meta">#delayInSeconds#&gt; * NSEC_PER_SEC)),  </span></span><br><span class="line">  dispatch_get_main_queue(), ^&#123;</span><br><span class="line">       &lt;<span class="meta">#code to be executed after a specified delay#&gt;</span></span><br><span class="line">   &#125;);</span><br></pre></td></tr></table></figure><h1 id="block分析"><a href="#block分析" class="headerlink" title="block分析"></a>block分析</h1><ul><li>大多数block就是执行一次的任务</li><li>大多数block就是用来做callBack<h1 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h1>从上面我们可以看到delegate，是有多个方法调用，是分步骤的，因此我们可以总结到，delegate是面向过程的。<br>block是执行一次任务，是面向结果的。<br>因此，在我们写代码时，如果是面向过程的，我们就使用delegate，是要获取结果的就使用block。</li></ul>]]></content>
    
    <summary type="html">
    
      开发过程中该选择 blocks or delegates,当我们需要实现回调的时候，使用哪一种方式比较合适呢？”
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://denmanboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>NavigationBar自定义BackItem</title>
    <link href="http://denmanboy.github.io/2016/04/20/NavigationBar%E8%87%AA%E5%AE%9A%E4%B9%89BackItem/"/>
    <id>http://denmanboy.github.io/2016/04/20/NavigationBar自定义BackItem/</id>
    <published>2016-04-20T13:20:43.000Z</published>
    <updated>2019-01-15T15:31:22.158Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://denmanboy.github.io/tags/iOS/"/>
    
  </entry>
  
  <entry>
    <title>2015过年回家</title>
    <link href="http://denmanboy.github.io/2016/02/06/2015%E8%BF%87%E5%B9%B4%E5%9B%9E%E5%AE%B6/"/>
    <id>http://denmanboy.github.io/2016/02/06/2015过年回家/</id>
    <published>2016-02-06T10:13:40.000Z</published>
    <updated>2019-01-15T15:31:22.157Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script><div class="article"><br><ul><br><li style="list-style:none;font-size:25px;height:30px">二月出来二月归，</li><br><li style="list-style:none;font-size:25px;height:30px">一事无成百不堪。</li><br><li style="list-style:none;font-size:25px;height:30px">不见天山九千雪，</li><br><li style="list-style:none;font-size:25px;height:30px">只见岁月染白头。</li><br></ul><br></div>]]></content>
    
    <summary type="html">
    
      又是一年，感慨万千
    
    </summary>
    
      <category term="life" scheme="http://denmanboy.github.io/categories/life/"/>
    
    
      <category term="诗词" scheme="http://denmanboy.github.io/tags/%E8%AF%97%E8%AF%8D/"/>
    
  </entry>
  
  <entry>
    <title>利用runtime容错</title>
    <link href="http://denmanboy.github.io/2015/12/02/%E5%88%A9%E7%94%A8runtime%E5%AE%B9%E9%94%99/"/>
    <id>http://denmanboy.github.io/2015/12/02/利用runtime容错/</id>
    <published>2015-12-02T10:32:41.000Z</published>
    <updated>2019-01-15T15:31:22.163Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="runtime" scheme="http://denmanboy.github.io/tags/runtime/"/>
    
  </entry>
  
  <entry>
    <title>iOS程序员开发进阶</title>
    <link href="http://denmanboy.github.io/2015/10/21/iOS%E7%A8%8B%E5%BA%8F%E5%91%98%E5%BC%80%E5%8F%91%E8%BF%9B%E9%98%B6/"/>
    <id>http://denmanboy.github.io/2015/10/21/iOS程序员开发进阶/</id>
    <published>2015-10-21T01:37:42.000Z</published>
    <updated>2019-01-15T15:31:22.160Z</updated>
    
    <content type="html"><![CDATA[<script>(function(){    var bp = document.createElement('script');    var curProtocol = window.location.protocol.split(':')[0];    if (curProtocol === 'https') {        bp.src = 'https://zz.bdstatic.com/linksubmit/push.js';            }    else {        bp.src = 'http://push.zhanzhang.baidu.com/push.js';    }    var s = document.getElementsByTagName("script")[0];    s.parentNode.insertBefore(bp, s);})();</script><h2 id="iOS9开始的新特性"><a href="#iOS9开始的新特性" class="headerlink" title="iOS9开始的新特性"></a>iOS9开始的新特性</h2><ul><li>nonnull__nonnull</li><li>nullable__nonnullable</li><li>null_resettable</li><li>NS_ASSUME_NONNULL_BEGIN \ NS_ASSUME_NONNULL_END</li><li>泛型__contravariant__covariant</li><li>__kindof</li><li>UIWindow</li><li>Storyboard Reference</li><li>UIStackView</li><li>Search API</li><li>3D touch</li></ul><h2 id="新技术的了解渠道"><a href="#新技术的了解渠道" class="headerlink" title="新技术的了解渠道"></a>新技术的了解渠道</h2><ul><li>WWDC开发者大会视频</li><li>官方文档<ul><li>General -&gt; Guides -&gt; iOS x.x API Diffs</li></ul></li></ul><h2 id="程序员的学习"><a href="#程序员的学习" class="headerlink" title="程序员的学习"></a>程序员的学习</h2><h3 id="iOS技术的学习"><a href="#iOS技术的学习" class="headerlink" title="iOS技术的学习"></a>iOS技术的学习</h3><ul><li>官当文档<ul><li>Sample Code(示例代码)</li><li>Guides(指南)</li><li>Reference(API参考)</li></ul></li><li>博客<ul><li><a href="http://www.cocoachina.com/ios/list_69_1.html" target="_blank" rel="noopener">CocoaChina</a></li><li><a href="http://ios.jobbole.com/" target="_blank" rel="noopener">伯乐在线</a></li><li><a href="http://objccn.io/" target="_blank" rel="noopener">objc中国</a></li><li><a href="https://github.com/tangqiaoboy/iOSBlogCN" target="_blank" rel="noopener">优秀博客汇总</a></li></ul></li><li><p>微博</p><ul><li><a href="http://weibo.com/kaifazhetoutiao" target="_blank" rel="noopener">开发者头条</a> </li><li><a href="http://weibo.com/cocoachina" target="_blank" rel="noopener">CocoaChina</a> </li><li><a href="http://weibo.com/luohanchenyilong" target="_blank" rel="noopener">iOS程序犭袁</a> </li><li><a href="http://weibo.com/tangqiaoboy" target="_blank" rel="noopener">唐巧_boy</a> </li><li><a href="http://weibo.com/u/1364395395" target="_blank" rel="noopener">我就叫Sunny怎么了</a> </li><li><a href="http://blog.ibireme.com" target="_blank" rel="noopener">ibireme</a></li><li><a href="http://weibo.com/710312327" target="_blank" rel="noopener">KITTEN-YANG</a> </li><li><a href="http://weibo.com/exceptions" target="_blank" rel="noopener">M了个J</a></li></ul></li><li><p>微信公众号</p><ul><li>iOS开发(iosDevTips)</li><li>iOS开发(iOSDevTip)</li><li>iOS技术分享(iosinfo)</li><li>猿圈(CodePush) </li></ul></li><li>其他<ul><li>多写技术博客(简书\个人博客站点)</li><li>参加一些技术分享活动(北京\上海\广州\杭州)</li><li>有自己的技术圈子</li></ul></li></ul><h3 id="非iOS技术的学习"><a href="#非iOS技术的学习" class="headerlink" title="非iOS技术的学习"></a>非iOS技术的学习</h3><ul><li><code>数据结构与算法(比如加密算法等等)</code></li><li><code>HTML5</code></li><li><code>JavaScript</code></li><li>Java(Android\JavaEE)</li><li>C++</li></ul><h3 id="非技术的学习"><a href="#非技术的学习" class="headerlink" title="非技术的学习"></a>非技术的学习</h3><ul><li>管理\心理学\幸福\创业\历史</li><li>网易公开课<ul><li>各种国际名牌大学的课堂视频</li><li>名人讲座(TED)</li></ul></li><li>名人讲座\名人访谈</li></ul>]]></content>
    
    <summary type="html">
    
      iOS9新的特性，及iOS程序员开发进阶
    
    </summary>
    
      <category term="technology" scheme="http://denmanboy.github.io/categories/technology/"/>
    
    
      <category term="iOS" scheme="http://denmanboy.github.io/tags/iOS/"/>
    
      <category term="iOS9" scheme="http://denmanboy.github.io/tags/iOS9/"/>
    
  </entry>
  
</feed>
